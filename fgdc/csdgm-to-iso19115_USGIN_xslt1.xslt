<?xml version="1.0" encoding="UTF-8"?>
<!--
======================================================================
	 FGDC CSDGM to ISO 19115 Transform version 2014 using XPath 1.0 and XSLT v1.0
	USGIN v2.0

	 This is the XML Style sheet that transforms metadata conforming to the Content Standards for 
	 Digital Geospatial Metadata of the Federal Geographic Data Committee June 1998 FGDC-STD-001-1998
	 version to the ISO 19115:2003(E) that conforms with the USGIN metadata profile.  
	 This stylesheet can be applied to FGDC CSDGM XML to generate ISO 19115 XML.

	 Original XSLT was generated by Altova MapForce 2009sp1 by the Metadata Transform Working Group NOAA 
	 National Coastal Data Development Center (NCDDC). 	 This xslt was forked from the NOAA transform in 2009. 
	 The current NOAA version does CSDGM to ISO1911-2, 
	 at http://service.ncddc.noaa.gov/rdn/www/metadata-standards/metadata-xml/documents/csdgm2iso19115-2.xslt)
	 This autogenerated XSLT is difficult to understand and maintain, and uses xslt v2.0.  
	 Original auto-generated XSLT extensively modified by Stephen Richard and Leahanna Musil, USGIN, 
	 to adopt for USGIN ISO metadata conventions and use with ESRI Geoportal, which can only do xslt v1.0 
	 transforms. Most of the autogenerated code has been reworked and refactored using XSLT v1.0 for 
	 better maintainability, including creation of various sub-templates for various common patterns. 
	 Some logical problems in the original transformation have also been revised. Spatial reference 
	 and entity-attribute information is put into the abstract as free text.
	 
	 Contributions to the code base are welcome via pull requests at 
	 https://github.com/usgin/usgin-geoportal-specs/tree/master/fgdc

	 Distribution liability:
		Neither USGIN nor NOAA make any warranty regarding these data, expressed or implied, nor does the 
		fact of distribution constitute such a warranty. NOAA, NESDIS, NODC, NCDDC, and USGIN cannot 
		assume liability for any damages caused by any errors or omissions in these data, nor as a 
		result of the failure of these data to function on a particular system. 
		These files were developed for opensource uses.
		
	License: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication
	http://creativecommons.org/publicdomain/zero/1.0/

 Revisions:
 20091028 (JLM) Namespaces were corrected to avoid duplicates.
 20091120 (JLM) CodeLists were edited to remove extra quotes and other undesired characters. 
 	CodeLists were checked to ensure inclusion of domian codes. 
 	Edits were also made to remove un-used elements. 
 	FGDC CSDGM elements horizpa/horizpar and vertacc/vertaccr were changed from being mapped to gml:id to gml:CoventionalUnit. 
 	Single Date Time Period of contect was added to mapping. 
 	Multiple Dates will replace if single date is empty. 
 	Duplicates of axisDimensionsProperties is not allowed to repeat. To solve this, MD_GridSpatialRepresentation
							 was repeated.
	Cell Geometry Code information was also added.
SMR 2012-01-27 comment out gmd:extendedElementInformation
SMR 2012-01-28 edit XSLT to make it more intelligible and maintainable. Give variables more 
							reasonable names, remove spurious type casting, add comments	
SMR 2014-11-20  This XSLT does not transform Extensions for Remote Sensing Metadata, FGDC-STD-012-2002
							To Do- add tests to recognize and handle remote sensing extensions.
SMR 2014-11-23 Start painful conversion to work with XSLT v1.0 for geoportal. 
SMR 2014-11-30 Tag version 2.0 for use in NGDS geoportals
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:gco="http://www.isotc211.org/2005/gco" xmlns:gfc="http://www.isotc211.org/2005/gfc"
	xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gmx="http://www.isotc211.org/2005/gmx"
	xmlns:gsr="http://www.isotc211.org/2005/gsr" xmlns:gss="http://www.isotc211.org/2005/gss"
	xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gml="http://www.opengis.net/gml"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf"
	xmlns:fn="http://www.w3.org/2005/xpath-functions"
	xmlns:grp="http://www.altova.com/Mapforce/grouping"
	xmlns:usgin="http://resources.usgin.org/xslt/FGDC2ISO"
	exclude-result-prefixes="fn grp vmf xs xsi xsl" >
	<!-- ********************** templates by SMR   **************************** -->
	<!-- ********************************************************************** -->
	<xsl:template name="usgin:TimePositionFormat">
		<!-- given two strings (inputDate, inputTime), runs through a variety of tests for different formats,
			returns dateTime 8601 string, or nilXXXXXX 
		where XXXXXX is the nil reason -->
<!--		<xsl:variable name="inputDate" select="caldate"/>
		<xsl:variable name="inputTime" select="time"/>-->
		<xsl:param name="inputDate"/>
        <xsl:param name="inputTime"/>
		
		<!-- var_DateString will contain either 'nilAAAAA' where AAAA is a nilReason, a valid xs:dateTime, 
			or it will contain a valid Date in format YYYY-MM-DD -->
		<xsl:variable name="currentDateTime">
			<!-- kludge to replace xslt 2.0 current time function -->
			<xsl:value-of select="string('2014-12-31T12:00:00Z')"/>
		</xsl:variable>
		<!-- a brute force, incomplete test for DateTime for xslt 1.0; replaces xslt 2.0 castable as xs:DateTime -->
		<xsl:variable name="castableAsDateTime">
			<xsl:value-of
				select="(substring($inputDate,5,1)='-') and (substring($inputDate,8,1)='-') and (substring($inputDate,11,1)='T') and (substring($inputDate,14,1)=':') and (substring($inputDate,17,1)=':')"
			/>
		</xsl:variable>
		<xsl:variable name="var_DateString">
			<xsl:choose>
				<xsl:when
					test="(fn:contains(fn:lower-case(fn:string($inputDate)), 'unknown') or fn:contains(fn:lower-case(fn:string($inputDate)), 'unpublished'))">
					<xsl:value-of select="fn:concat('nil',fn:string($inputDate))"/>
				</xsl:when>
				<xsl:when test="fn:contains(fn:lower-case(fn:string($inputDate)), 'present') or fn:contains(fn:lower-case(fn:string($inputDate)), 'now')">
					<!-- proxy for xslt 2.0 currentdate function -->
					<xsl:value-of select="$currentDateTime"/>
				</xsl:when>
				<xsl:when test="string($castableAsDateTime)='true'">
					<xsl:value-of select="fn:string($inputDate)"/>
				</xsl:when>
				<!-- convert YYYYMMDD format to YYYY-MM-DD format -->
				<xsl:otherwise>
					<!--                 <xsl:variable name="var_dateWork">-->
					<xsl:choose>
						<xsl:when
							test="string-length(fn:normalize-space(fn:string($inputDate)))=8">
							<xsl:value-of select="fn:concat(fn:substring(fn:normalize-space(fn:string($inputDate)), 0, 5), '-', fn:substring(fn:normalize-space(fn:string($inputDate)), 5, 2), '-',fn:substring(fn:normalize-space(fn:string($inputDate)), 7, 2))"
							/>
						</xsl:when>
						<xsl:when
							test="string-length(fn:normalize-space(fn:string($inputDate)))=6">
							<xsl:value-of
								select="fn:concat(fn:substring(fn:normalize-space(fn:string($inputDate)), 0, 5), '-', fn:substring(fn:normalize-space(fn:string($inputDate)), 5, 2), '-01')"
							/>
						</xsl:when>
						<xsl:when
							test="string-length(fn:normalize-space(fn:string($inputDate)))=4">
							<xsl:value-of
								select="fn:concat(fn:substring(fn:normalize-space(fn:string($inputDate)), 0, 5), '-01-01')"
							/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="fn:string('nilmissing')"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		
		<!-- update the test to see if put in current date -->
		<xsl:variable name="castableAsDateTime2">
			<xsl:value-of
				select="(substring($var_DateString,5,1)='-') and (substring($var_DateString,8,1)='-') and (substring($var_DateString,11,1)='T') and (substring($var_DateString,14,1)=':') and (substring($var_DateString,17,1)=':')"
			/>
		</xsl:variable>       
		
		<!-- done with date, either is nilAAAAA, 0000, a valid xs:dateTime, or a valid xs:date -->
		<!-- now need to process input time  -->
		<xsl:variable name="var_timeString">
			<!-- xsl:if test="fn:exists($inputTime)" -->
			<xsl:choose>
				<xsl:when test="(fn:upper-case(fn:string($inputTime))='UNKNOWN')">
					<xsl:value-of select="xs:string('12:00:00')"/>
				</xsl:when>
				<xsl:when test="string-length($inputTime) &gt; 6">
					<!-- has decimal seconds, put everything after the 6th digit in decimal seconds -->
					<xsl:value-of
						select="fn:concat(fn:substring(fn:string($inputTime), 0, 3), ':', fn:substring(fn:string($inputTime),3,2), ':', fn:substring(fn:string($inputTime), 5, 2),'.',fn:substring(fn:string($inputTime), 7, (string-length($inputTime)-6)))"
					/>
				</xsl:when>
				<xsl:when test="string-length($inputTime)=6">
					<!-- HHMMSS -->
					<xsl:value-of
						select="fn:concat(fn:substring(fn:string($inputTime), 0, 3), ':', fn:substring(fn:string($inputTime),3,2), ':', fn:substring(fn:string($inputTime), 5, 2))"
					/>
				</xsl:when>
				<xsl:when test="string-length($inputTime)=4">
					<xsl:value-of
						select="fn:concat(fn:substring(fn:string($inputTime), 0, 3), ':', fn:substring(fn:string($inputTime),3,2), ':00')"
					/>
				</xsl:when>
				<xsl:when test="string-length($inputTime)=2">
					<xsl:value-of
						select="fn:concat(fn:substring(fn:string($inputTime), 0, 3), ':00:00')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="xs:string('12:00:00')"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<!-- now merge date string with time string (if it exists) -->
		<xsl:choose>
			<xsl:when test="starts-with(xs:string($var_DateString),'nil')">
				<xsl:value-of select="string($var_DateString)"/>
			</xsl:when>
			<xsl:when test="string($castableAsDateTime2)='true'">
				<xsl:value-of select="fn:string($var_DateString)"/>
			</xsl:when>
			<xsl:when
				test="fn:exists($var_DateString) and (fn:string-length($var_DateString)=10) and (fn:string-length($var_timeString)&gt; 0)">
				<xsl:value-of
					select="fn:concat(fn:string($var_DateString),'T',fn:string($var_timeString))"
				/>
			</xsl:when>
			<xsl:when
				test="fn:exists($var_DateString) and (fn:string-length($var_DateString)=10)  and (fn:string-length($var_timeString)= 0)">
				<xsl:value-of select="fn:concat(fn:string($var_DateString),'T12:00:00')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="string('nilinapplicable')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<!-- ************************************************************************************* -->
	<xsl:template name="usgin:contactName">
		<!-- processes name part of a gmd:CI_ResponsibleParty -->
		<!-- handler for individual, organization, position name -->
		<!-- now populate the elements count(individualName + OrganisationName + positionName) must be >0 -->
		<!-- check that at least one got populated -->
		<xsl:param name="the-cntinfo"/>
		<!-- input is a csdgm xml cntinfo node -->
		<xsl:variable name="inputPersonNode">
			<xsl:choose>
				<xsl:when test="fn:exists($the-cntinfo/cntperp/cntper)">
					<xsl:value-of select="xs:string($the-cntinfo/cntperp/cntper)"/>
				</xsl:when>
				<xsl:when test="fn:exists($the-cntinfo/cntorgp/cntper)">
					<xsl:value-of select="xs:string($the-cntinfo/cntorgp/cntper)"/>
				</xsl:when>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="inputOrganizationNode">
			<xsl:choose>
				<xsl:when test="fn:exists($the-cntinfo/cntperp/cntorg)">
					<xsl:value-of select="xs:string($the-cntinfo/cntperp/cntorg)"/>
				</xsl:when>
				<xsl:when test="fn:exists($the-cntinfo/cntorgp/cntorg)">
					<xsl:value-of select="xs:string($the-cntinfo/cntorgp/cntorg)"/>
				</xsl:when>
			</xsl:choose>
		</xsl:variable>

		<xsl:choose>
			<xsl:when
				test="fn:exists($inputPersonNode) or fn:exists($inputOrganizationNode) or fn:exists($the-cntinfo/cntpos)">
				<xsl:if test="fn:exists($inputPersonNode)">
					<gmd:individualName>
						<gco:CharacterString>
							<xsl:for-each select="$inputPersonNode">
								<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
								<xsl:if test="(count($inputPersonNode)>1)">
									<xsl:value-of select="xs:string(' ')"/>
								</xsl:if>
							</xsl:for-each>
						</gco:CharacterString>
					</gmd:individualName>
				</xsl:if>
				<xsl:if test="fn:exists($inputOrganizationNode)">
					<gmd:organisationName>
						<gco:CharacterString>
							<xsl:for-each select="$inputOrganizationNode">
								<xsl:value-of
									select="fn:concat(fn:normalize-space(xs:string(.)), ' ')"/>
								<!-- xsl:if test="(count($inputOrganizationNode)>1)">
									<xsl:value-of select="xs:string(' ')"/>
								</xsl:if -->
							</xsl:for-each>
						</gco:CharacterString>
					</gmd:organisationName>
				</xsl:if>
				<xsl:if test="fn:exists($the-cntinfo/cntpos)">
					<!-- only one allowed by csdgm -->
					<gmd:positionName>
						<gco:CharacterString>
							<xsl:for-each select="$the-cntinfo/cntpos">
								<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
								<xsl:if test="(count($the-cntinfo/cntpos)>1)">
									<xsl:value-of select="xs:string(' ')"/>
								</xsl:if>
							</xsl:for-each>
						</gco:CharacterString>
					</gmd:positionName>
				</xsl:if>
			</xsl:when>
			<!-- if at least one is present check -->
			<!-- no contact name -->
			<xsl:otherwise>
				<gmd:organisationName>
					<gco:CharacterString>metadata contact name, organisation and position are
						missing</gco:CharacterString>
				</gmd:organisationName>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- contact name handler -->

	<!-- ***************************************************************************** -->
	<xsl:template name="usgin:contactHandler">
		<xsl:param name="the-cntinfo"/>
		<gmd:CI_Contact>
			<xsl:if test="fn:exists($the-cntinfo/cntvoice) or fn:exists($the-cntinfo/cntfax)">
				<gmd:phone>
					<gmd:CI_Telephone>
						<xsl:for-each select="$the-cntinfo/cntvoice">
							<gmd:voice>
								<gco:CharacterString>
									<xsl:value-of select="fn:concat(fn:normalize-space(.),' ')"/>
								</gco:CharacterString>
							</gmd:voice>
						</xsl:for-each>
						<xsl:for-each select="$the-cntinfo/cntfax">
							<gmd:facsimile>
								<gco:CharacterString>
									<xsl:value-of select="fn:concat(fn:normalize-space(.),' ')"/>
								</gco:CharacterString>
							</gmd:facsimile>
						</xsl:for-each>
					</gmd:CI_Telephone>
				</gmd:phone>
			</xsl:if>
			<gmd:address>
				<gmd:CI_Address>
					<xsl:call-template name="usgin:addressFormat">
						<!-- take the first address if there is more than one; ISO only allows one address on a contact-->
						<xsl:with-param name="inputAddr" select="$the-cntinfo/cntaddr[1]"/>
					</xsl:call-template>
					<!-- done with postal address elements, now the e-mail. Set this up so that some value gets inserted -->
					<xsl:choose>
						<xsl:when test="fn:exists($the-cntinfo/cntemail)">
							<xsl:for-each select="$the-cntinfo/cntemail">
								<gmd:electronicMailAddress>
									<gco:CharacterString>
										<xsl:value-of select="fn:normalize-space(.)"/>
									</gco:CharacterString>
								</gmd:electronicMailAddress>
							</xsl:for-each>
						</xsl:when>
						<xsl:otherwise>
							<gmd:electronicMailAddress>
								<gco:CharacterString>eMail@missing.org</gco:CharacterString>
							</gmd:electronicMailAddress>
						</xsl:otherwise>
					</xsl:choose>
				</gmd:CI_Address>
			</gmd:address>
			
			<xsl:for-each select="$the-cntinfo/hours">
				<gmd:hoursOfService>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:hoursOfService>
			</xsl:for-each>
			<xsl:for-each select="$the-cntinfo/cntinst">
				<gmd:contactInstructions>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:contactInstructions>
			</xsl:for-each>
		</gmd:CI_Contact>
	</xsl:template>
	<!-- *************************************************** -->
	<xsl:template name="usgin:addressFormat">
		<xsl:param name="inputAddr"/>
		<!-- don't put in postal address elements unless at least one has a value -->
		<xsl:if
			test="fn:exists($inputAddr/address) or fn:exists($inputAddr/city) or fn:exists($inputAddr/state) or fn:exists($inputAddr/postal) or fn:exists($inputAddr/country)">
			<xsl:for-each select="$inputAddr/address">
				<gmd:deliveryPoint>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:deliveryPoint>
			</xsl:for-each>
			<xsl:for-each select="$inputAddr/city">
				<gmd:city>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:city>
			</xsl:for-each>
			<xsl:for-each select="$inputAddr/state">
				<gmd:administrativeArea>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:administrativeArea>
			</xsl:for-each>
			<xsl:for-each select="$inputAddr/postal">
				<gmd:postalCode>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:postalCode>
			</xsl:for-each>
			<xsl:for-each select="$inputAddr/country">
				<gmd:country>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:country>
			</xsl:for-each>
		</xsl:if>
	</xsl:template>
	<!-- ********************************************************** -->
	<xsl:template name="usgin:citinfoHandler">
		<xsl:param name="theciteinfo"/>
		<xsl:variable name="var_citeinfoSourceNode" select="."/>
		<gmd:CI_Citation>
			<gmd:title>
				<xsl:for-each select="title">
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</xsl:for-each>
			</gmd:title>
			<gmd:date>
				<xsl:choose>
					<xsl:when test="fn:exists(pubdate)">
						<gmd:CI_Date>
							<gmd:date>
								<!-- content for USGIN is gco:DateTime -->
									<xsl:variable name="var_formatPubdate">
										<xsl:call-template name="usgin:TimePositionFormat">
											<xsl:with-param name="inputDate" select="pubdate"/>
											<xsl:with-param name="inputTime" select="pubtime"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="starts-with($var_formatPubdate,'nil')">
											<xsl:attribute name="gco:nilReason">
												<xsl:value-of select="'unknown'"/>
											</xsl:attribute>
										</xsl:when>
										<xsl:otherwise>
											<gco:DateTime>
												<xsl:value-of select="string($var_formatPubdate)"/>
											</gco:DateTime>
										</xsl:otherwise>
									</xsl:choose>
							</gmd:date>
							<gmd:dateType>
								<gmd:CI_DateTypeCode
									codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_DateTypeCode"
									codeListValue="publication" codeSpace="002"
									>publication</gmd:CI_DateTypeCode>
							</gmd:dateType>
						</gmd:CI_Date>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="gco:nilReason">
							<xsl:value-of select="'missing'"/>
						</xsl:attribute>
					</xsl:otherwise>
				</xsl:choose>
			</gmd:date>
			<xsl:for-each select="edition">
				<gmd:edition>
					<gco:CharacterString>
						<xsl:value-of select="xs:string(.)"/>
					</gco:CharacterString>
				</gmd:edition>
			</xsl:for-each>
			<gmd:identifier>
				<gmd:MD_Identifier>
					<gmd:authority>
						<gmd:CI_Citation>
							<gmd:title>
								<gco:CharacterString>USGIN convention</gco:CharacterString>
							</gmd:title>
							<gmd:date gco:nilReason="inapplicable"/>
						</gmd:CI_Citation>
					</gmd:authority>
					<gmd:code>
						<gco:CharacterString>
							<xsl:for-each select="onlink">
								<xsl:value-of
									select="fn:concat(fn:normalize-space(xs:string(.)),' ')"/>
							</xsl:for-each>
						</gco:CharacterString>
					</gmd:code>
				</gmd:MD_Identifier>
			</gmd:identifier>
			<gmd:citedResponsibleParty>
				<gmd:CI_ResponsibleParty>
					<xsl:if test="fn:exists(origin)">
						<xsl:variable name="var_countOrigin">
							<xsl:value-of select="count(origin)"/>
						</xsl:variable>
						<!-- assume that csdgm originators are all individuals -->
						<gmd:individualName>
							<gco:CharacterString>
								<xsl:for-each select="origin">
									<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
									<xsl:if test="$var_countOrigin &gt; 1">
										<xsl:value-of select="';  '"/>
									</xsl:if>
								</xsl:for-each>
							</gco:CharacterString>
						</gmd:individualName>
					</xsl:if>
					<xsl:if test="count(origin) = 0">
						<gmd:individualName>
							<gco:CharacterString>
								<xsl:value-of select="'No originator name provided'"/>
							</gco:CharacterString>
						</gmd:individualName>
					</xsl:if>
					<gmd:role>
						<gmd:CI_RoleCode
							codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode"
							codeListValue="originator" codeSpace="006">originator</gmd:CI_RoleCode>
					</gmd:role>
				</gmd:CI_ResponsibleParty>
			</gmd:citedResponsibleParty>
			<xsl:if test="fn:exists(geoform)">
				<gmd:presentationForm>
					<xsl:variable name="var_geoformDocType">
						<xsl:call-template name="vmf:docType">
							<xsl:with-param name="input"
								select="fn:upper-case(fn:normalize-space(xs:string(geoform)))"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:variable name="var_geoformDocCode">
						<xsl:call-template name="vmf:docCode">
							<xsl:with-param name="input"
								select="fn:upper-case(fn:normalize-space(xs:string(geoform)))"/>
						</xsl:call-template>
					</xsl:variable>
					<gmd:CI_PresentationFormCode>
						<xsl:attribute name="codeList">
							<xsl:choose>
								<xsl:when test="$var_geoformDocType ='unknown'">
									<xsl:value-of
										select="xs:string('http://www.opengis.net/def/nil/OGC/0/unknown/')"
									/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of
										select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_PresentationFormCode')"
									/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:attribute>
						<xsl:attribute name="codeListValue">
							<xsl:value-of select="xs:string($var_geoformDocType)"/>
						</xsl:attribute>
						<xsl:attribute name="codeSpace">
							<xsl:value-of select="xs:string($var_geoformDocCode)"/>
						</xsl:attribute>
						<xsl:value-of select="fn:normalize-space(xs:string(geoform))"/>
					</gmd:CI_PresentationFormCode>
				</gmd:presentationForm>
			</xsl:if>
			<xsl:for-each select="serinfo">
				<gmd:series>
					<gmd:CI_Series>
						<gmd:name>
							<gco:CharacterString>
								<xsl:value-of select="xs:string(sername)"/>
							</gco:CharacterString>
						</gmd:name>
						<gmd:issueIdentification>
							<gco:CharacterString>
								<xsl:value-of select="xs:string(issue)"/>
							</gco:CharacterString>
						</gmd:issueIdentification>
					</gmd:CI_Series>
				</gmd:series>
			</xsl:for-each>
			<xsl:for-each select="othercit">
				<gmd:otherCitationDetails>
					<gco:CharacterString>
						<xsl:value-of select="xs:string(.)"/>
					</gco:CharacterString>
				</gmd:otherCitationDetails>
			</xsl:for-each>
		</gmd:CI_Citation>
	</xsl:template>
	<!-- citeinfo handler -->

	<!-- ************************************************** -->
	<!-- MD_Format handler -->
	<xsl:template name="usgin:format">
		<xsl:param name="thedigform"/>
		<xsl:param name="theFmtID"/>
		<!-- each digform has one digtinfo, which includes one format 
		each of which has formname, one of version number or date, specification, informationContent
		decompressionTechnique and transferSize.-->
		<gmd:MD_Format>
			<xsl:if test="fn:exists($theFmtID) and string-length(string($theFmtID)) &gt; 0">
				<xsl:attribute name="id">
					<xsl:value-of select="$theFmtID"/>
				</xsl:attribute>
			</xsl:if>
			<gmd:name>
				<!-- name is mandatory -->
				<gco:CharacterString>
					<xsl:value-of select="fn:normalize-space(xs:string($thedigform/digtinfo/formname))"/>
				</gco:CharacterString>
			</gmd:name>
			<gmd:version>
				<!-- version is mandatory; in source will be either version number or version date; 
				if neither present, make nil:unknown-->
				<xsl:choose>
					<xsl:when test="fn:exists($thedigform/digtinfo/formvern)">
						<gco:CharacterString>
							<xsl:value-of select="xs:string($thedigform/digtinfo/formvern)"/>
						</gco:CharacterString>
					</xsl:when>
					<xsl:when test="fn:exists($thedigform/digtinfo/formverd)">
						<gco:CharacterString>
							<xsl:value-of select="fn:string($thedigform/digtinfo/formverd)"/>
						</gco:CharacterString>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="gco:nilReason">
							<xsl:value-of select="xs:string('unknown')"/>
						</xsl:attribute>
					</xsl:otherwise>
				</xsl:choose>
			</gmd:version>
			<xsl:if
				test="fn:exists($thedigform/digtinfo/formspec) or fn:exists($thedigform/digtinfo/formcont) or fn:exists($thedigform/digtinfo/transize)">
				<gmd:specification>
					<gco:CharacterString>
						<xsl:for-each select="$thedigform/digtinfo">
						<xsl:if test="fn:exists(formspec)">
							<xsl:value-of
								select="concat('Format specification:',fn:normalize-space(xs:string(formspec)),'. ')"
							/>
						</xsl:if>
						<xsl:if test="fn:exists(formcont)">
							<xsl:value-of
								select="concat('Format Information Content:',fn:normalize-space(xs:string(formcont)),'. ')"
							/>
						</xsl:if>
						<xsl:if test="fn:exists(transize)">
							<xsl:value-of
								select="concat('File transfer size:',fn:normalize-space(xs:string(transize)),'. ')"
							/>
						</xsl:if>
						</xsl:for-each>
					</gco:CharacterString>
				</gmd:specification>
			</xsl:if>
			<xsl:for-each select="$thedigform/digtinfo/filedec">
				<gmd:fileDecompressionTechnique>
					<gco:CharacterString>
						<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
					</gco:CharacterString>
				</gmd:fileDecompressionTechnique>
			</xsl:for-each>
		</gmd:MD_Format>
	</xsl:template>

	<xsl:template name="usgin:digTransferOption">
		<xsl:param name="thedigform"/>
		<xsl:param name="theOptionID"/>
		<!-- input is a single $var_metadataRoot/distinfo/stdorder/digform node  -->
		<!-- handler for digital transfer options -->
		<gmd:MD_DigitalTransferOptions>
			<xsl:if test="fn:exists(theOptionID)">
				<xsl:attribute name="id">
					<xsl:value-of select="xs:string($theOptionID)"/>
				</xsl:attribute>
			</xsl:if>
			<xsl:if test="fn:exists(digtinfo/transize)">
				<gmd:transferSize>
					<xsl:choose>
						<!-- trick to check if its a number -->
						<xsl:when test="number(digtinfo/transize)=number(digtinfo/transize)">
							<gco:Real>
								<xsl:value-of select="xs:string(number(digtinfo/transize))"/>
							</gco:Real>
						</xsl:when>
						<xsl:otherwise>
							<xsl:attribute name="gco:nilReason">
								<xsl:value-of select="'inapplicable'"/>
							</xsl:attribute>
						</xsl:otherwise>
					</xsl:choose>
				</gmd:transferSize>
			</xsl:if>
			<!-- find text to put in online linkage description and name -->
			<!-- csdgm allows multipl onlinopt for each collection of formats 
				each of these becomes a gmd:CI_OnlineResource-->
			<xsl:for-each select="digtopt">
				<xsl:variable name="var_oncomp">
					<xsl:value-of select="onlinopt/oncomp"/>
				</xsl:variable>
				<xsl:variable name="var_accinstr">
					<xsl:value-of select="onlinopt/accinstr"/>
				</xsl:variable>
				<xsl:for-each select="computer">
					<xsl:variable name="var-count-networkr">
						<xsl:value-of select="count(networkr)"/>
					</xsl:variable>
					<xsl:for-each select="networkr">
						<gmd:onLine>
							<gmd:CI_OnlineResource>
								<gmd:linkage>
									<gmd:URL>
										<xsl:value-of select="xs:string(.)"/>
									</gmd:URL>
								</gmd:linkage>
								<xsl:if test="contains(.,':')">
									<gmd:protocol>
										<gco:CharacterString>
											<xsl:value-of select="substring-before(.,':')"/>
										</gco:CharacterString>
									</gmd:protocol>
								</xsl:if>
								<gmd:name>
									<gco:CharacterString>
										<xsl:value-of select="concat($var_oncomp,', ',xs:string(.))"
										/>
									</gco:CharacterString>
								</gmd:name>
								<gmd:description>
									<gco:CharacterString>
										<xsl:value-of
											select="concat($var_accinstr,' Link from csdgm:networkr.')"
										/>
									</gco:CharacterString>
								</gmd:description>
								<gmd:function>
									<gmd:CI_OnLineFunctionCode
										codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_OnLineFunctionCode"
										codeListValue="download"
										>download</gmd:CI_OnLineFunctionCode>
								</gmd:function>
							</gmd:CI_OnlineResource>
						</gmd:onLine>
					</xsl:for-each>
					<!-- networkr -->
				</xsl:for-each>
				<!-- computer -->
			</xsl:for-each>
			<!-- digtopt -->
			<!-- process offline distribution -->
			<!-- csdgm allows online one offline distribution per digtopt, 
					but stdorder may have multiple digtopt/offoptn; process only the first one here, 
					others would have to be in separate transferOption elements-->
			<xsl:for-each select="digtopt/offoptn[1]">
				<!-- just use for-each to set context node -->
				<gmd:offLine>
					<gmd:MD_Medium>
						<gmd:name>
							<!-- csdgm only allows one offmedia value -->
							<xsl:variable name="var_mediaType">
								<xsl:call-template name="vmf:mediumType">
									<xsl:with-param name="input" select="fn:upper-case(offmedia)"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var_mediaCode">
								<xsl:call-template name="vmf:mediumCode">
									<xsl:with-param name="input" select="fn:upper-case(offmedia)"/>
								</xsl:call-template>
							</xsl:variable>
							<gmd:MD_MediumNameCode>
								<xsl:attribute name="codeList">
									<xsl:value-of
										select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_MediumNameCode')"
									/>
								</xsl:attribute>
								<xsl:attribute name="codeListValue">
									<xsl:value-of select="xs:string($var_mediaType)"/>
								</xsl:attribute>
								<xsl:attribute name="codeSpace">
									<xsl:value-of select="xs:string($var_mediaCode)"/>
								</xsl:attribute>
								<xsl:value-of select="string(offmedia)"/>
							</gmd:MD_MediumNameCode>
						</gmd:name>
						<xsl:for-each select="reccap/recden">
							<gmd:density>
								<xsl:choose>
									<xsl:when test="number(.)=number(.)">
										<gco:Real>
											<xsl:value-of select="xs:string(number(.))"/>
										</gco:Real>
									</xsl:when>
									<xsl:otherwise>
										<!-- bogus trick to get whatever is in the source into the output... -->
										<xsl:attribute name="gco:nilReason">
											<xsl:value-of select="'inapplicable'"/>
										</xsl:attribute>
										<xsl:element name="gco:Real">
											<xsl:attribute name="uuidref">
												<xsl:value-of select="xs:string(.)"/>
											</xsl:attribute>
										</xsl:element>
									</xsl:otherwise>
								</xsl:choose>
							</gmd:density>
						</xsl:for-each>
						<xsl:if test="fn:exists(reccap/recdenu)">
							<gmd:densityUnits>
								<gco:CharacterString>
									<xsl:value-of select="xs:string(recdenu)"/>
								</gco:CharacterString>
							</gmd:densityUnits>
						</xsl:if>
						<xsl:for-each select="recfmt">
							<gmd:mediumFormat>
								<!-- csdgm allows multiple formats on one offoptn -->
								<!-- formats are mapped to ISO mediumCodes -->
								<xsl:variable name="var_recFormatName">
									<xsl:call-template name="vmf:encodingType">
										<xsl:with-param name="input"
											select="fn:upper-case(fn:normalize-space(xs:string(.)))"
										/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:variable name="var_recFormatCode">
									<xsl:call-template name="vmf:encodingCode">
										<xsl:with-param name="input"
											select="fn:upper-case(fn:normalize-space(xs:string(.)))"
										/>
									</xsl:call-template>
								</xsl:variable>
								<gmd:MD_MediumFormatCode>
									<xsl:attribute name="codeList">
										<xsl:value-of
											select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_MediumFormatCode')"
										/>
									</xsl:attribute>
									<xsl:attribute name="codeListValue">
										<xsl:value-of select="$var_recFormatName"/>
									</xsl:attribute>
									<xsl:attribute name="codeSpace">
										<xsl:value-of select="$var_recFormatCode"/>
									</xsl:attribute>
									<xsl:value-of select="."/>
								</gmd:MD_MediumFormatCode>
							</gmd:mediumFormat>
						</xsl:for-each>
						<xsl:if test="fn:exists(compat)">
							<gmd:mediumNote>
								<gco:CharacterString>
									<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
								</gco:CharacterString>
							</gmd:mediumNote>
						</xsl:if>
					</gmd:MD_Medium>
				</gmd:offLine>
			</xsl:for-each>
		</gmd:MD_DigitalTransferOptions>
	</xsl:template>
	<!-- transfer options -->

	<!--  section 1, functions to translate generic codelist terms into ISO codeListValue and codelist code -->
	<xsl:template name="vmf:geometryType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='POINT'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='PIXEL'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='GRID CELL'">
				<xsl:value-of select="'area'"/>
			</xsl:when>
			<xsl:when test="$input='VOXEL'">
				<xsl:value-of select="'area'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:geometryCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='POINT'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='PIXEL'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='GRID CELL'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='VOXEL'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:geometryType2">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='POINT'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='ENTITY POINT'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='LABEL POINT'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='AREA POINT'">
				<xsl:value-of select="'point'"/>
			</xsl:when>
			<xsl:when test="$input='NODE, PLANAR GRAPH'">
				<xsl:value-of select="'surface'"/>
			</xsl:when>
			<xsl:when test="$input='NODE, NETWORK'">
				<xsl:value-of select="'surface'"/>
			</xsl:when>
			<xsl:when test="$input='STRING'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='LINK'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='COMPLETE CHAIN'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='AREA CHAIN'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='NETWORK CHAIN, PLANAR GRAPH'">
				<xsl:value-of select="'surface'"/>
			</xsl:when>
			<xsl:when test="$input='NETWORK CHAIN, NONPLANAR GRAPH'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='CIRCULAR ARC, THREE POINT CENTER'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='ELLIPTICAL ARC'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='UNIFORM B-SPLINE'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='PIECEWISE BEZIER'">
				<xsl:value-of select="'curve'"/>
			</xsl:when>
			<xsl:when test="$input='RING WITH MIXED COMPOSITION'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF STRINGS'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF CHAINS'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF ARCS'">
				<xsl:value-of select="'composite'"/>
			</xsl:when>
			<xsl:when test="$input='G-POLYGON'">
				<xsl:value-of select="'complex'"/>
			</xsl:when>
			<xsl:when test="$input='GT-POLYGON COMPOSED OF RINGS'">
				<xsl:value-of select="'complex'"/>
			</xsl:when>
			<xsl:when test="$input='GT-POLYGON COMPOSED OF CHAINS'">
				<xsl:value-of select="'complex'"/>
			</xsl:when>
			<xsl:when test="$input='UNIVERSE POLYGON COMPOSED OF RINGS'">
				<xsl:value-of select="'complex'"/>
			</xsl:when>
			<xsl:when test="$input='UNIVERSE POLYGON COMPOSED OF CHAINS'">
				<xsl:value-of select="'complex'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:geometryCode2">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='POINT'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='ENTITY POINT'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='LABEL POINT'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='AREA POINT'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='NODE, PLANAR GRAPH'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='NODE, NETWORK'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='STRING'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='LINK'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='COMPLETE CHAIN'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='AREA CHAIN'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='NETWORK CHAIN, PLANAR GRAPH'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='NETWORK CHAIN, NONPLANAR GRAPH'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='CIRCULAR ARC, THREE POINT CENTER'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='ELLIPTICAL ARC'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='UNIFORM B-SPLINE'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='PIECEWISE BEZIER'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='RING WITH MIXED COMPOSITION'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF STRINGS'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF CHAINS'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='RING COMPOSED OF ARCS'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='G-POLYGON'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='GT-POLYGON COMPOSED OF RINGS'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='GT-POLYGON COMPOSED OF CHAINS'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='UNIVERSE POLYGON COMPOSED OF RINGS'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='UNIVERSE POLYGON COMPOSED OF CHAINS'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!--not used	<xsl:template name="vmf:unknown">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='UNKNOWN'">
				<xsl:value-of select="'unknown'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>-->
	<xsl:template name="vmf:docType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='ATLAS'">
				<xsl:value-of select="'mapHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='AUDIO'">
				<xsl:value-of select="'documentDigital'"/>
			</xsl:when>
			<xsl:when test="$input='DIAGRAM'">
				<xsl:value-of select="'documentDigital'"/>
			</xsl:when>
			<xsl:when test="$input='DOCUMENT'">
				<xsl:value-of select="'documentDigital'"/>
			</xsl:when>
			<xsl:when test="$input='GLOBE'">
				<xsl:value-of select="'documentHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='MAP'">
				<xsl:value-of select="'mapDigital'"/>
			</xsl:when>
			<xsl:when test="$input='PRINTED MAP'">
				<xsl:value-of select="'mapHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='MODEL'">
				<xsl:value-of select="'modelDigital'"/>
			</xsl:when>
			<xsl:when test="$input='PHYSICAL MODELl'">
				<xsl:value-of select="'modelHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='MULTIMEDIA PRESENTATION'">
				<xsl:value-of select="'imageDigital'"/>
			</xsl:when>
			<xsl:when test="$input='PROFILE'">
				<xsl:value-of select="'profileDigital'"/>
			</xsl:when>
			<xsl:when test="$input='CROSS-SECTION'">
				<xsl:value-of select="'profileHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='RASTER DIGITAL DATA'">
				<xsl:value-of select="'mapDigital'"/>
			</xsl:when>
			<xsl:when test="$input='REMOTE-SENSING IMAGE'">
				<xsl:value-of select="'imageDigital'"/>
			</xsl:when>
			<xsl:when test="$input='SECTION'">
				<xsl:value-of select="'profileHardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='SPREADSHEET'">
				<xsl:value-of select="'tableDigital'"/>
			</xsl:when>
			<xsl:when test="$input='TABULAR DIGITAL DATA'">
				<xsl:value-of select="'tableDigital'"/>
			</xsl:when>
			<xsl:when test="$input='VECTOR DIGITAL DATA'">
				<xsl:value-of select="'mapDigital'"/>
			</xsl:when>
			<xsl:when test="$input='VIDEO'">
				<xsl:value-of select="'videoDigital'"/>
			</xsl:when>
			<xsl:when test="$input='VIEW'">
				<xsl:value-of select="'imageDigital'"/>
			</xsl:when>
			<xsl:when test="$input='DATABASE'">
				<xsl:value-of select="'documentDigital'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:docCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='ATLAS'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='AUDIO'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='DIAGRAM'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='DOCUMENT'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='GLOBE'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='MAP'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='PRINTED MAP'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='MODEL'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:when test="$input='PHYSICAL MODELl'">
				<xsl:value-of select="'008'"/>
			</xsl:when>
			<xsl:when test="$input='MULTIMEDIA PRESENTATION'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='PROFILE'">
				<xsl:value-of select="'009'"/>
			</xsl:when>
			<xsl:when test="$input='CROSS-SECTION'">
				<xsl:value-of select="'010'"/>
			</xsl:when>
			<xsl:when test="$input='RASTER DIGITAL DATA'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='REMOTE-SENSING IMAGE'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='SECTION'">
				<xsl:value-of select="'010'"/>
			</xsl:when>
			<xsl:when test="$input='SPREADSHEET'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='TABULAR DIGITAL DATA'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='VECTOR DIGITAL DATA'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='VIDEO'">
				<xsl:value-of select="'013'"/>
			</xsl:when>
			<xsl:when test="$input='VIEW'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='DATABASE'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:statusType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='COMPLETED'">
				<xsl:value-of select="'completed'"/>
			</xsl:when>
			<xsl:when test="$input='COMPLETE'">
				<xsl:value-of select="'completed'"/>
			</xsl:when>
			<xsl:when test="$input='ARCHIVED'">
				<xsl:value-of select="'historicalArchive'"/>
			</xsl:when>
			<xsl:when test="$input='OBSOLETE'">
				<xsl:value-of select="'obsolete'"/>
			</xsl:when>
			<xsl:when test="$input='ON GOING'">
				<xsl:value-of select="'onGoing'"/>
			</xsl:when>
			<xsl:when test="$input='CONTINUALLY'">
				<xsl:value-of select="'onGoing'"/>
			</xsl:when>
			<xsl:when test="$input='PLANNED'">
				<xsl:value-of select="'planned'"/>
			</xsl:when>
			<xsl:when test="$input='REQUIRED'">
				<xsl:value-of select="'required'"/>
			</xsl:when>
			<xsl:when test="$input='IN PROGRESS'">
				<xsl:value-of select="'underDevelopment'"/>
			</xsl:when>
			<xsl:when test="$input='IN WORK'">
				<xsl:value-of select="'underDevelopment'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:statusCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='COMPLETED'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='COMPLETE'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='ARCHIVED'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='OBSOLETE'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='ON GOING'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='CONTINUALLY'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='PLANNED'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='REQUIRED'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='IN PROGRESS'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:when test="$input='IN WORK'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:updateFrequency">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CONTINUALLY'">
				<xsl:value-of select="'continual'"/>
			</xsl:when>
			<xsl:when test="$input='DAILY'">
				<xsl:value-of select="'daily'"/>
			</xsl:when>
			<xsl:when test="$input='WEEKLY'">
				<xsl:value-of select="'weekly'"/>
			</xsl:when>
			<xsl:when test="$input='TWO WEEKS'">
				<xsl:value-of select="'fortnightly'"/>
			</xsl:when>
			<xsl:when test="$input='MONTHLY'">
				<xsl:value-of select="'monthly'"/>
			</xsl:when>
			<xsl:when test="$input='QUARTERLY'">
				<xsl:value-of select="'quarterly'"/>
			</xsl:when>
			<xsl:when test="$input='BIANNUALLY'">
				<xsl:value-of select="'biannually'"/>
			</xsl:when>
			<xsl:when test="$input='ANNUALLY'">
				<xsl:value-of select="'annually'"/>
			</xsl:when>
			<xsl:when test="$input='YEARLY'">
				<xsl:value-of select="'annually'"/>
			</xsl:when>
			<xsl:when test="$input='AS NEEDED'">
				<xsl:value-of select="'asNeeded'"/>
			</xsl:when>
			<xsl:when test="$input='IRREGULAR'">
				<xsl:value-of select="'irregular'"/>
			</xsl:when>
			<xsl:when test="$input='NOT PLANNED'">
				<xsl:value-of select="'notPlanned'"/>
			</xsl:when>
			<xsl:when test="$input='NONE PLANNED'">
				<xsl:value-of select="'notPlanned'"/>
			</xsl:when>
			<xsl:when test="$input='UNKNOWN'">
				<xsl:value-of select="'unknown'"/>
			</xsl:when>
			<xsl:when test="$input='NONE'">
				<xsl:value-of select="'notPlanned'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:updateFrequencyCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CONTINUALLY'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='DAILY'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='WEEKLY'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='TWO WEEKS'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='MONTHLY'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='QUARTERLY'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='BIANNUALLY'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:when test="$input='ANNUALLY'">
				<xsl:value-of select="'008'"/>
			</xsl:when>
			<xsl:when test="$input='YEARLY'">
				<xsl:value-of select="'008'"/>
			</xsl:when>
			<xsl:when test="$input='AS NEEDED'">
				<xsl:value-of select="'009'"/>
			</xsl:when>
			<xsl:when test="$input='IRREGULAR'">
				<xsl:value-of select="'010'"/>
			</xsl:when>
			<xsl:when test="$input='NOT PLANNED'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='NONE PLANNED'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='UNKNOWN'">
				<xsl:value-of select="'012'"/>
			</xsl:when>
			<xsl:when test="$input='NONE'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'012'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:securityClassType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CONFIDENTIAL'">
				<xsl:value-of select="'confidential'"/>
			</xsl:when>
			<xsl:when test="$input='SECRET'">
				<xsl:value-of select="'secret'"/>
			</xsl:when>
			<xsl:when test="$input='TOP SECRET'">
				<xsl:value-of select="'topSecret'"/>
			</xsl:when>
			<xsl:when test="$input='UNCLASSIFIED'">
				<xsl:value-of select="'unclassified'"/>
			</xsl:when>
			<xsl:when test="$input='RESTRICTED'">
				<xsl:value-of select="'restricted'"/>
			</xsl:when>
			<xsl:when test="$input='SECERT'">
				<xsl:value-of select="'secret'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:securityClassCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CONFIDENTIAL'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='SECRET'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='TOP SECRET'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='UNCLASSIFIED'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='RESTRICTED'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='SECERT'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:spatialRepresentationType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='POINT'">
				<xsl:value-of select="'vector'"/>
			</xsl:when>
			<xsl:when test="$input='VECTOR'">
				<xsl:value-of select="'vector'"/>
			</xsl:when>
			<xsl:when test="$input='RASTER'">
				<xsl:value-of select="'grid'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:spatialRepresentationCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='vector'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='grid'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:mediumType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CD-ROM'">
				<xsl:value-of select="'cdRom'"/>
			</xsl:when>
			<xsl:when test="$input='DVD'">
				<xsl:value-of select="'dvd'"/>
			</xsl:when>
			<xsl:when test="$input='DVD-ROM'">
				<xsl:value-of select="'dvdRom'"/>
			</xsl:when>
			<xsl:when test="$input='3-1/2 INCH FLOPPY DISK'">
				<xsl:value-of select="'3halfInchFloppy'"/>
			</xsl:when>
			<xsl:when test="$input='5-1/4 INCH FLOPPY'">
				<xsl:value-of select="'5quarterInchFloppy'"/>
			</xsl:when>
			<xsl:when test="$input='7-TRACK TAPE'">
				<xsl:value-of select="'7trackTape'"/>
			</xsl:when>
			<xsl:when test="$input='9-TRACK TAPE'">
				<xsl:value-of select="'9trackType'"/>
			</xsl:when>
			<xsl:when test="$input='9-TRACK'">
				<xsl:value-of select="'9trackTape'"/>
			</xsl:when>
			<xsl:when test="$input='3480 CARTRIDGE'">
				<xsl:value-of select="'3480Cartridge'"/>
			</xsl:when>
			<xsl:when test="$input='3490 CARTRIDGE'">
				<xsl:value-of select="'3490Cartridge'"/>
			</xsl:when>
			<xsl:when test="$input='3580 CARTRIDGE'">
				<xsl:value-of select="'3580Cartridge'"/>
			</xsl:when>
			<xsl:when test="$input='4 MM CARTRIDGE'">
				<xsl:value-of select="'4mmCartridgeTape'"/>
			</xsl:when>
			<xsl:when test="$input='8 MM CARTRIDGE'">
				<xsl:value-of select="'8mmCartridgeTape'"/>
			</xsl:when>
			<xsl:when test="$input='1/4 INCH CARTRIDGE'">
				<xsl:value-of select="'1quarterInchCartridgeTape'"/>
			</xsl:when>
			<xsl:when test="$input='DIGITAL LINEAR TAPE'">
				<xsl:value-of select="'digitalLinearTape'"/>
			</xsl:when>
			<xsl:when test="$input='ONLINE'">
				<xsl:value-of select="'onLine'"/>
			</xsl:when>
			<xsl:when test="$input='SATELLITE'">
				<xsl:value-of select="'satellite'"/>
			</xsl:when>
			<xsl:when test="$input='TELEPHONE LINK'">
				<xsl:value-of select="'telephoneLink'"/>
			</xsl:when>
			<xsl:when test="$input='HARDCOPY'">
				<xsl:value-of select="'hardcopy'"/>
			</xsl:when>
			<xsl:when test="$input='CD ROM'">
				<xsl:value-of select="'cdRom'"/>
			</xsl:when>
			<xsl:when test="$input='CDROM'">
				<xsl:value-of select="'cdRom'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:mediumCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CD-ROM'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='DVD'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='DVD-ROM'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='3-1/2 INCH FLOPPY DISK'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='5-1/4 INCH FLOPPY'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='7-TRACK TAPE'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='9-TRACK TAPE'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:when test="$input='9-TRACK'">
				<xsl:value-of select="'007'"/>
			</xsl:when>
			<xsl:when test="$input='3480 CARTRIDGE'">
				<xsl:value-of select="'008'"/>
			</xsl:when>
			<xsl:when test="$input='3490 CARTRIDGE'">
				<xsl:value-of select="'009'"/>
			</xsl:when>
			<xsl:when test="$input='3580 CARTRIDGE'">
				<xsl:value-of select="'010'"/>
			</xsl:when>
			<xsl:when test="$input='4 MM CARTRIDGE'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='8 MM CARTRIDGE'">
				<xsl:value-of select="'012'"/>
			</xsl:when>
			<xsl:when test="$input='1/4 INCH CARTRIDGE'">
				<xsl:value-of select="'013'"/>
			</xsl:when>
			<xsl:when test="$input='DIGITAL LINEAR TAPE'">
				<xsl:value-of select="'014'"/>
			</xsl:when>
			<xsl:when test="$input='ONLINE'">
				<xsl:value-of select="'015'"/>
			</xsl:when>
			<xsl:when test="$input='SATELLITE'">
				<xsl:value-of select="'016'"/>
			</xsl:when>
			<xsl:when test="$input='TELEPHONE LINK'">
				<xsl:value-of select="'017'"/>
			</xsl:when>
			<xsl:when test="$input='HARDCOPY'">
				<xsl:value-of select="'018'"/>
			</xsl:when>
			<xsl:when test="$input='CD ROM'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:when test="$input='CDROM'">
				<xsl:value-of select="'011'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:encodingType">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CPIO'">
				<xsl:value-of select="'cpio'"/>
			</xsl:when>
			<xsl:when test="$input='TAR'">
				<xsl:value-of select="'tar'"/>
			</xsl:when>
			<xsl:when test="$input='HIGH SEIRRA'">
				<xsl:value-of select="'highSierra'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660'">
				<xsl:value-of select="'iso9660'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 WITH ROCK RIDGE'">
				<xsl:value-of select="'iso9660RockRidge'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 UNIX'">
				<xsl:value-of select="'iso9660RockRidge'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 WITH APPLE HFS'">
				<xsl:value-of select="'iso9660AppleHFS'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 MAC'">
				<xsl:value-of select="'iso9660AppleHFS'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:encodingCode">
		<xsl:param name="input"/>
		<xsl:choose>
			<xsl:when test="$input='CPIO'">
				<xsl:value-of select="'001'"/>
			</xsl:when>
			<xsl:when test="$input='TAR'">
				<xsl:value-of select="'002'"/>
			</xsl:when>
			<xsl:when test="$input='HIGH SEIRRA'">
				<xsl:value-of select="'003'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660'">
				<xsl:value-of select="'004'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 WITH ROCK RIDGE'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 UNIX'">
				<xsl:value-of select="'005'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 WITH APPLE HFS'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:when test="$input='ISO 9660 MAC'">
				<xsl:value-of select="'006'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<!-- end of codelist lookup functions -->
	<!--   ***** -->
	<!-- xml header stuff -->
<!--	<xsl:namespace-alias stylesheet-prefix="gml" result-prefix="#default"/>-->

	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>

	<!--  ******************************************************************** -->
	<!--                   **************************                          -->
	<!-- ********************************************************************* -->
	<!-- Start actual output metadata record here, let's get down to business -->
	<xsl:template match="metadata">
		<xsl:variable name="currentDateTime">
			<xsl:value-of select="string('2014-12-31T12:00:00Z')"/>
		</xsl:variable>
		<gmd:MD_Metadata xmlns:gml="http://www.opengis.net/gml">
			<xsl:attribute name="xsi:schemaLocation">
				<xsl:value-of
					select="'http://www.isotc211.org/2005/gmd http://schemas.opengis.net/iso/19139/20060504/gmd/gmd.xsd'"/>
			</xsl:attribute>
			<xsl:variable name="var_metadataRoot" select="."/>

			<gmd:fileIdentifier>
				<gco:CharacterString>
					<xsl:choose>
						<xsl:when
							test="fn:exists($var_metadataRoot/idinfo/citation/citeinfo/onlink[1])">
							<xsl:value-of
								select="fn:normalize-space(fn:substring-after(xs:string($var_metadataRoot/idinfo/citation/citeinfo/onlink[1]),'//'))"
							/>
						</xsl:when>
						<xsl:when test="fn:exists($var_metadataRoot/distinfo[1]/resdesc)">
							<xsl:value-of
								select="fn:replace(fn:normalize-space(xs:string($var_metadataRoot/distinfo[1]/resdesc)),' ','')"
							/>
						</xsl:when>
						<xsl:otherwise>
							<!-- put in something, USGIN profile requires... -->
							<xsl:value-of
								select="fn:concat(fn:string('http://www.opengis.net/def/nil/OGC/0/missing/'),$currentDateTime)"
							/>
						</xsl:otherwise>
					</xsl:choose>
				</gco:CharacterString>
			</gmd:fileIdentifier>
			<!-- these all have fixed values for now -->
			<gmd:language>
				<gco:CharacterString>eng</gco:CharacterString>
			</gmd:language>
			<gmd:characterSet>
				<gmd:MD_CharacterSetCode
					codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_CharacterSetCode"
					codeListValue="utf8" codeSpace="004">utf8</gmd:MD_CharacterSetCode>
			</gmd:characterSet>
			<gmd:hierarchyLevel>
				<gmd:MD_ScopeCode
					codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ScopeCode"
					codeListValue="dataset" codeSpace="005">dataset</gmd:MD_ScopeCode>
			</gmd:hierarchyLevel>
			<!-- end fixed values, now start pulling stuff from input record -->
			<gmd:hierarchyLevelName>
				<gco:CharacterString>
					<xsl:value-of select="$var_metadataRoot/distinfo/resdesc"/>
				</gco:CharacterString>
			</gmd:hierarchyLevelName>
			<gmd:contact>
				<gmd:CI_ResponsibleParty>

					<xsl:call-template name="usgin:contactName">
						<xsl:with-param name="the-cntinfo"
							select="$var_metadataRoot/metainfo/metc/cntinfo"/>
						<!--						<xsl:with-param name="inputOrganizationNode" select="($var_contactOrganisation_exists)"/>
						<xsl:with-param name="inputPositionNode"	select="($var_metadataRoot/metainfo/metc/cntinfo/cntpos)"/>
-->
					</xsl:call-template>
					<gmd:contactInfo>
						<xsl:call-template name="usgin:contactHandler">
							<xsl:with-param name="the-cntinfo"
								select="$var_metadataRoot/metainfo/metc/cntinfo"/>
						</xsl:call-template>

					</gmd:contactInfo>
					<!-- role gets a fixed value; FGDC doesn't allow for different roles, so assume point of contact -->
					<gmd:role>
						<gmd:CI_RoleCode
							codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode"
							codeListValue="pointOfContact" codeSpace="007"
							>pointOfContact</gmd:CI_RoleCode>
					</gmd:role>
				</gmd:CI_ResponsibleParty>
			</gmd:contact>
			<gmd:dateStamp>
				<!-- content is gco:DateTime; don't put in multiple dates (would be invalid in csdgm and iso19115) -->
				<xsl:for-each select="$var_metadataRoot/metainfo[1]/metd[1]">
					<xsl:variable name="var_formatMetd">
					<xsl:call-template name="usgin:TimePositionFormat">
						<xsl:with-param name="inputDate" select="$var_metadataRoot/metainfo/metd"/>
					</xsl:call-template>
					</xsl:variable>
				<xsl:choose>
					<xsl:when test="starts-with($var_formatMetd,'nil')">
						<xsl:attribute name="gco:nilReason">
							<xsl:value-of select="'unknown'"/>
						</xsl:attribute>
					</xsl:when>
					<xsl:otherwise>
						<gco:DateTime>
							<xsl:value-of select="string($var_formatMetd)"/>
						</gco:DateTime>
					</xsl:otherwise>
				</xsl:choose>
				</xsl:for-each>
			</gmd:dateStamp>
			<gmd:metadataStandardName>
				<gco:CharacterString>
					<xsl:value-of select="'ISO-USGIN'"/>
				</gco:CharacterString>
			</gmd:metadataStandardName>
			<gmd:metadataStandardVersion>
				<gco:CharacterString>
					<xsl:value-of select="'1.2'"/>
				</gco:CharacterString>
			</gmd:metadataStandardVersion>
			<!-- if there is a URL supplied in the citation for the resource, use this as the resource identifier -->
			<gmd:dataSetURI>
				<gco:CharacterString>
					<xsl:choose>
						<!-- check first for FGDC-STD-012-2002 (extensions for Remote Sensing) identifier, that would be the best... -->
						<xsl:when test="fn:exists($var_metadataRoot/idinfo/datsetid)">
							<xsl:value-of
								select="fn:normalize-space(xs:string($var_metadataRoot/idinfo/datsetid))"
							/>
						</xsl:when>
						<!-- otherwise try a couple things that might be in original FGDC CSDGM -->
						<xsl:when
							test="fn:exists($var_metadataRoot/idinfo/citation/citeinfo/onlink[1])">
							<xsl:value-of
								select="fn:normalize-space(xs:string($var_metadataRoot/idinfo/citation/citeinfo/onlink[1]))"
							/>
						</xsl:when>
						<xsl:when test="fn:exists($var_metadataRoot/distinfo[1]/resdesc)">
							<xsl:value-of
								select="fn:normalize-space(xs:string($var_metadataRoot/distinfo[1]/resdesc))"
							/>
						</xsl:when>
						<xsl:otherwise>
							<!-- put in something, USGIN profile requires... -->
							<xsl:value-of
								select="fn:concat(fn:string('http://www.opengis.net/def/nil/OGC/0/missing/'),$currentDateTime)"
							/>
						</xsl:otherwise>
					</xsl:choose>
				</gco:CharacterString>
			</gmd:dataSetURI>

			<!-- metadata/spdoinfo spatial data information -->
			<xsl:for-each select="$var_metadataRoot/spdoinfo[1]">
				<!-- spatial representation -->
				<xsl:for-each select="rastinfo">
					<xsl:variable name="var_rastinfoNode" select="."/>
					<gmd:spatialRepresentationInfo>
						<gmd:MD_GridSpatialRepresentation>
							<xsl:variable name="var_rowCount_exists" select="(fn:exists(rowcount))"/>
							<xsl:variable name="var_colCount_exists" select="(fn:exists(colcount))"/>
							<xsl:variable name="var_vrtCount_exists" select="(fn:exists(vrtcount))"/>
							<gmd:numberOfDimensions>
								<xsl:choose>
									<xsl:when
										test="fn:exists(xs:string(xs:integer($var_rowCount_exists + $var_colCount_exists + $var_vrtCount_exists)))">
										<gco:Integer>
											<xsl:value-of
												select="xs:string(xs:integer($var_rowCount_exists + $var_colCount_exists + $var_vrtCount_exists))"
											/>
										</gco:Integer>
									</xsl:when>
									<xsl:otherwise>
										<gco:Integer>
											<xsl:value-of select="xs:string('1')"/>
										</gco:Integer>
									</xsl:otherwise>
								</xsl:choose>
							</gmd:numberOfDimensions>
							<!-- This for-each and the similar ones below were commented out by Ted Habermann 2011-07-26
									<xsl:for-each select="$var72_metadata/idinfo/citation/citeinfo/lworkcit">-->
							<gmd:axisDimensionProperties>
								<gmd:MD_Dimension>
									<gmd:dimensionName>
										<!--											<xsl:variable name="var_hasRow"  select="(if (fn:exists($var_rastinfoNode/rowcount)) then 'row' else ())"/>-->
										<xsl:if test="fn:exists($var_rastinfoNode/rowcount)">
											<gmd:MD_DimensionNameTypeCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_DimensionNameTypeCode"
												codeListValue="row" codeSpace="001"
												>row</gmd:MD_DimensionNameTypeCode>
										</xsl:if>
									</gmd:dimensionName>
									<xsl:if test="fn:exists($var_rastinfoNode/rowcount)">
										<gmd:dimensionSize>
											<gco:Integer>
												<xsl:value-of
												select="xs:string(xs:integer($var_rastinfoNode/rowcount))"
												/>
											</gco:Integer>
										</gmd:dimensionSize>
									</xsl:if>
								</gmd:MD_Dimension>
							</gmd:axisDimensionProperties>
							<!--</xsl:for-each>-->
							<!--<xsl:for-each select="$var72_metadata/idinfo/citation/citeinfo/lworkcit">-->
							<gmd:axisDimensionProperties>
								<gmd:MD_Dimension>
									<gmd:dimensionName>
										<!--											<xsl:variable name="var_hasColumn"  select="(if (fn:exists($var_rastinfoNode/colcount)) then 'column' else ())"/>-->
										<xsl:if test="fn:exists($var_rastinfoNode/colcount)">
											<gmd:MD_DimensionNameTypeCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_DimensionNameTypeCode"
												codeListValue="column" codeSpace="002"
												>column</gmd:MD_DimensionNameTypeCode>
										</xsl:if>
									</gmd:dimensionName>
									<gmd:dimensionSize>
										<xsl:for-each select="$var_rastinfoNode/colcount">
											<gco:Integer>
												<xsl:value-of select="xs:string(xs:integer(.))"/>
											</gco:Integer>
										</xsl:for-each>
									</gmd:dimensionSize>
								</gmd:MD_Dimension>
							</gmd:axisDimensionProperties>
							<!--</xsl:for-each>-->
							<!--<xsl:for-each select="$var72_metadata/idinfo/citation/citeinfo/lworkcit">-->
							<xsl:if test="fn:exists($var_rastinfoNode/vrtcount)">
								<gmd:axisDimensionProperties>
									<gmd:MD_Dimension>
										<gmd:dimensionName>
											<!--<xsl:variable name="var_hasVertical"  select="(if (fn:exists($var_rastinfoNode/vrtcount)) then 'vertical' else ())"/>-->
											<gmd:MD_DimensionNameTypeCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_DimensionNameTypeCode"
												codeListValue="vertical" codeSpace="003"
												>vertical</gmd:MD_DimensionNameTypeCode>
										</gmd:dimensionName>
										<gmd:dimensionSize>
											<xsl:for-each select="$var_rastinfoNode/vrtcount">
												<gco:Integer>
												<xsl:value-of select="xs:string(xs:integer(.))"/>
												</gco:Integer>
											</xsl:for-each>
										</gmd:dimensionSize>
									</gmd:MD_Dimension>
								</gmd:axisDimensionProperties>
							</xsl:if>
							<!--</xsl:for-each>-->
							<!-- determine if input data has a rasttype property and use that to assign cell geometry Type code -->
							<xsl:variable name="var_rasttypeGeometryType">
								<xsl:call-template name="vmf:geometryType">
									<xsl:with-param name="input"
										select="fn:upper-case(fn:normalize-space(fn:string(rasttype)))"
									/>
								</xsl:call-template>
							</xsl:variable>
							<!-- if have gridSpatialRepresnetation, cellGeometry is mandatory -->
							<xsl:choose>
								<xsl:when test="fn:exists($var_rasttypeGeometryType)">
									<gmd:cellGeometry>
										<gmd:MD_CellGeometryCode
											codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_CellGeometryCode">
											<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string(xs:anyURI($var_rasttypeGeometryType))"
												/>
											</xsl:attribute>
											<xsl:variable name="var_rasttypeGeometryCode">
												<xsl:call-template name="vmf:geometryCode">
												<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(fn:string(rasttype)))"
												/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if test="fn:exists($var_rasttypeGeometryCode)">
												<xsl:attribute name="codeSpace">
												<xsl:value-of
												select="xs:string(xs:anyURI($var_rasttypeGeometryCode))"
												/>
												</xsl:attribute>
											</xsl:if>
											<xsl:value-of select="$var_rasttypeGeometryType"/>
										</gmd:MD_CellGeometryCode>
									</gmd:cellGeometry>
								</xsl:when>
								<xsl:otherwise>
									<gmd:cellGeometry gco:nilReason="missing"/>
								</xsl:otherwise>
							</xsl:choose>
							<!-- no content for transformation parmater avaialalbility in FGDC metatada -->
							<gmd:transformationParameterAvailability>
								<xsl:attribute name="gco:nilReason">
									<xsl:value-of select="unknown"/>
								</xsl:attribute>
							</gmd:transformationParameterAvailability>
						</gmd:MD_GridSpatialRepresentation>
					</gmd:spatialRepresentationInfo>
				</xsl:for-each>
				<!-- do vector spatial representation description; FGCD xml specifies choice between 
						rastinfo or ptvctinf but ISO19115 allows both to be present in valid instance -->
				<xsl:for-each select="ptvctinf">
					<!-- Point and Vector Object Information,+ the types and numbers of vector or nongridded point spatial objects in the data set. -->
					<!-- FGDC xml implements this element as a choice between 1..* sdtsterm elements, or 1 vpfterm  -->
					<xsl:if test="fn:exists(sdtsterm)">
						<gmd:spatialRepresentationInfo>
							<gmd:MD_VectorSpatialRepresentation>
								<xsl:for-each select="sdtsterm">								<gmd:geometricObjects>
									<gmd:MD_GeometricObjects>
										<gmd:geometricObjectType>
											<xsl:choose>
												<xsl:when test="fn:exists(sdtstype)">	
													<xsl:variable name="var_geometryType2">
														<xsl:call-template name="vmf:geometryType2">
															<xsl:with-param name="input" select="fn:upper-case(fn:normalize-space(sdtstype))"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:variable name="var_geometryCode2">
														<xsl:call-template name="vmf:geometryCode2">
															<xsl:with-param name="input" select="fn:upper-case(fn:normalize-space(sdtstype))"/>
														</xsl:call-template>
													</xsl:variable>
													
													<xsl:choose>
														
														<xsl:when test="$var_geometryType2 != 'unknown'">
															<gmd:MD_GeometricObjectTypeCode>
																<xsl:attribute name="codeList">
																	<xsl:value-of select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_GeometricObjectTypeCode')"/>
																</xsl:attribute>
																<xsl:attribute name="codeListValue">
																	<xsl:value-of select="xs:string($var_geometryType2)"/>
																</xsl:attribute>
																<xsl:attribute name="codeSpace">
																	<xsl:value-of select="xs:string($var_geometryCode2)"/>
																</xsl:attribute>
																<xsl:value-of select="string(sdtstype)"/>
															</gmd:MD_GeometricObjectTypeCode>
														</xsl:when>
														<xsl:otherwise>
															<!-- geometry type lookup failed -->
															<gmd:MD_GeometricObjectTypeCode>
																<xsl:attribute name="codeList">
																	<xsl:value-of select="xs:string('http://www.opengis.net/def/nil/OGC/0/missing')"/>
																</xsl:attribute>
																<xsl:attribute name="codeListValue">
																	<xsl:value-of select="xs:string(sdtstype)"/>
																</xsl:attribute>
																<xsl:value-of select="string(sdtstype)"/>
															</gmd:MD_GeometricObjectTypeCode>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="gco:nilReason">
														<xsl:value-of select="'missing'"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
										</gmd:geometricObjectType>
										<xsl:if test="fn:exists(ptvctcnt)">
											<gmd:geometricObjectCount>
												<gco:Integer>
													<xsl:value-of select="xs:string(xs:integer(ptvctcnt))"/>
												</gco:Integer>
											</gmd:geometricObjectCount>
										</xsl:if>
									</gmd:MD_GeometricObjects>
								</gmd:geometricObjects>
								</xsl:for-each>
								
							</gmd:MD_VectorSpatialRepresentation>
						</gmd:spatialRepresentationInfo>
					</xsl:if>
					<xsl:if test="fn:exists(vpfterm)">
						<gmd:spatialRepresentationInfo>
							<gmd:MD_VectorSpatialRepresentation>
								<gmd:topologyLevel>
									<gmd:MD_TopologyLevelCode>
										<!-- Levels 0,1,2,3, defined by Department of Defense, 1992, Vector Product Format (MIL-STD-600006): Philadelphia, Department of Defense, Defense Printing Service Detachment Office, page 34 -->
										<xsl:choose>
											<xsl:when test="fn:exists(vpfterm/vpflevel) and (number(vpfterm/vpflevel)=number(vpfterm/vpflevel)) and (number(vpfterm/vpflevel) &lt; 4)">
												<!-- vpf level should be: '0 <= VPF Topology Level <= 3' -->
												<xsl:attribute name="codeList">
													<xsl:value-of
														select="string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_TopologyLevelCode')"
													/>
												</xsl:attribute>
												<xsl:attribute name="codeSpace">
													<xsl:value-of
														select="fn:normalize-space(fn:string(vpfterm/vpflevel))"
													/>
												</xsl:attribute>
												<xsl:attribute name="codeListValue">
													<xsl:choose>
														<xsl:when test="number(vpfterm/vpflevel)=0">
															<xsl:value-of select="'geometryOnly'"/>
														</xsl:when>
														<xsl:when test="number(vpfterm/vpflevel)=1">
															<xsl:value-of select="'topology1D'"/>
														</xsl:when>
														<xsl:when test="number(vpfterm/vpflevel)=2">														<xsl:value-of select="'planarGraph'"/>
														</xsl:when>
														<xsl:when test="number(vpfterm/vpflevel)=3">														<xsl:value-of select="'fullPlanarGraph'"/>
														</xsl:when>
													</xsl:choose>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:attribute name="codeList">
													<xsl:value-of select="xs:string('http://www.opengis.net/def/nil/OGC/0/missing')"/>
												</xsl:attribute>
												<xsl:attribute name="codeListValue">
													<xsl:value-of select="vpflevel"/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
									</gmd:MD_TopologyLevelCode>
								</gmd:topologyLevel>
								<xsl:for-each select="vpfterm/vpfinfo">
									<gmd:geometricObjects>
										<gmd:MD_GeometricObjects>
											<gmd:geometricObjectType>
												<xsl:variable name="var_vpfTypeExists">
													<xsl:if test="fn:exists(vpftype)">
														<xsl:value-of select="fn:string(vpftype)"/>
													</xsl:if>
												</xsl:variable>
												<xsl:variable name="var_vpfgeometryType2">
													<xsl:call-template name="vmf:geometryType2">
														<xsl:with-param name="input" select="fn:upper-case(fn:normalize-space($var_vpfTypeExists))"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:variable name="var_vpfgeometryCode2">
													<xsl:call-template name="vmf:geometryCode2">
														<xsl:with-param name="input" select="fn:upper-case(fn:normalize-space($var_vpfTypeExists))"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="not(fn:exists(vpftype))">
														<!-- error condition, sdtstype is required -->
														<xsl:attribute name="gco:nilReason">
															<xsl:value-of select="'missing'"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:when test="$var_vpfgeometryType2 != 'unknown'">
														<gmd:MD_GeometricObjectTypeCode>
															<xsl:attribute name="codeList">
																<xsl:value-of select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_GeometricObjectTypeCode')"/>
															</xsl:attribute>
															<xsl:attribute name="codeListValue">
																<xsl:value-of select="xs:string($var_vpfgeometryType2)"/>
															</xsl:attribute>
															<xsl:attribute name="codeSpace">
																<xsl:value-of select="xs:string($var_vpfgeometryCode2)"/>
															</xsl:attribute>
															<xsl:value-of select="string(vpftype)"/>
														</gmd:MD_GeometricObjectTypeCode>
													</xsl:when>
													<xsl:otherwise>
														<!-- geometry type lookup faile -->
														
														<gmd:MD_GeometricObjectTypeCode>
															<xsl:attribute name="codeList">
																<xsl:value-of select="xs:string('http://www.opengis.net/def/nil/OGC/0/missing')"/>
															</xsl:attribute>
															<xsl:attribute name="codeListValue">
																<xsl:value-of select="xs:string(vpftype)"/>
															</xsl:attribute>
															<xsl:value-of select="string(vpftype)"/>
														</gmd:MD_GeometricObjectTypeCode>
														
													</xsl:otherwise>
												</xsl:choose>
											</gmd:geometricObjectType>
											<xsl:if test="fn:exists(ptvctcnt)">
												<gmd:geometricObjectCount>
													<gco:Integer>
														<xsl:value-of select="xs:string(xs:integer(ptvctcnt))"/>
													</gco:Integer>
												</gmd:geometricObjectCount>
											</xsl:if>
										</gmd:MD_GeometricObjects>
									</gmd:geometricObjects>
								</xsl:for-each>
							</gmd:MD_VectorSpatialRepresentation>
						</gmd:spatialRepresentationInfo>
					</xsl:if>
				</xsl:for-each>
				<!-- spatial reference system information -->
			<!-- indspref is an indirect spatial reference: any way to describe a location without using 
				coordinates. Indirect spatial reference methods usually use a geographic feature, 
				such as a county, state, township or section of the Public Land Survey System, or a road, 
				to uniquely identify a place. The reference may use the name of the feature, for example
				"Westmoreland County", or a code that identifies the feature (such as a county FIPS code). Other
				examples of indirect spatial references include street addresses, linear reference systems, and 
				River Reach codes. -->
			<!-- this is bogus; what need here is a mappign from '4.1.2.1.1 Map Projection Name - 
				name of the map projection' domain values to EPSG codes -->
			<!-- these are the domain values:
				Albers Conical Equal Area
				Azimuthal Equidistant
				Equidistant Conic
				Equirectangular
				General Vertical Near-sided Perspective Gnomonic
				Lambert Azimuthal Equal Area
				Lambert Conformal Conic
				Mercator
				Modified Stereographic for Alaska
				Miller Cylindrical
				Oblique Mercator
				Orthographic
				Polar Stereographic
				Polyconic
				Robinson
				Sinusoidal
				Space Oblique Mercator
				Stereographic
				Transverse Mercator
				van der Grinten -->
	<!--		<xsl:for-each select="$var_metadataRoot/spdoinfo">-->
				<xsl:for-each select="indspref">
		<!-- put cdsgm 'Indirect Spatial Reference' into the code characterString...-->
					<gmd:referenceSystemInfo>
					<gmd:MD_ReferenceSystem>

							<gmd:referenceSystemIdentifier>
								<gmd:RS_Identifier>
									<!-- smr change gmd:CodeSpace to gmd:code -->
									<gmd:code>
										<gco:CharacterString>
											 <xsl:value-of select="xs:string(.)"/>

										</gco:CharacterString>
									</gmd:code>
								</gmd:RS_Identifier>
							</gmd:referenceSystemIdentifier>

					</gmd:MD_ReferenceSystem>
				</gmd:referenceSystemInfo>
				</xsl:for-each> <!-- indspref  -->
			</xsl:for-each> <!-- processing spdinfo section of csdgm -->
			<!-- metadata extensions FGDC metainfo/metextns/onlink here  -->
			<gmd:metadataExtensionInfo>
				<gmd:MD_MetadataExtensionInformation>
					<gmd:extensionOnLineResource>
						<gmd:CI_OnlineResource>
							<gmd:linkage>
								<gmd:URL>
									<xsl:variable name="CIlinkURL">
										<xsl:value-of
											select="xs:integer(fn:count(/metadata/metainfo/metextns[1]/onlink))"
										/>
									</xsl:variable>
									<xsl:for-each select="/metadata/metainfo/metextns[1]/onlink">
										<xsl:value-of
											select="xs:string(xs:anyURI(fn:normalize-space(xs:string(.))))"/>
										<xsl:if test="($CIlinkURL>1)">
											<xsl:value-of select="xs:string(' ')"/>
										</xsl:if>
									</xsl:for-each>
								</gmd:URL>
							</gmd:linkage>
							<xsl:for-each select="metprof">
								<gmd:name>
									<gco:CharacterString>
										<xsl:value-of
											select="concat('Profile Name:', fn:normalize-space(xs:string(.)))"
										/>
									</gco:CharacterString>
								</gmd:name>
							</xsl:for-each>
						</gmd:CI_OnlineResource>
					</gmd:extensionOnLineResource>
				</gmd:MD_MetadataExtensionInformation>
			</gmd:metadataExtensionInfo>
			
	<!-- *************************************************************************-->
			<!-- FGDC id metadata/idinfo goes into MD_identification -->
			<!-- context is metadata/idinfo -->
			<xsl:for-each select="$var_metadataRoot/idinfo">
				<xsl:variable name="var_idinfoSourceNode" select="."/>
				<gmd:identificationInfo>
					<gmd:MD_DataIdentification>
						<xsl:for-each select="citation/citeinfo">
							<gmd:citation>
									<xsl:call-template name="usgin:citinfoHandler">
										<xsl:with-param name="theciteinfo" select="."/>
									</xsl:call-template>
							</gmd:citation>
						</xsl:for-each>
						<gmd:abstract>
							<gco:CharacterString>
								<xsl:choose>
									<xsl:when
										test="fn:exists(descript/abstract) and string-length(xs:string(descript/abstract))>0">
										<xsl:value-of
											select="fn:normalize-space(xs:string(descript/abstract))"
										/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="xs:string('no abstract provided')"/>
									</xsl:otherwise>
								</xsl:choose>
<!-- insert text for spatial data organization, spatial data reference, and entity attribute information
							that is not well accounted for in transformation -->
<!-- the following text is modified from FGDC_Classic for Web body
An xsl template for displaying metadata in ArcInfo8 with the traditional FGDC look and feel created by mp-->
								Other sections: <xsl:for-each select="$var_metadataRoot/spdoinfo">
									Spatial Data Organization: <xsl:for-each select="indspref">
										Indirect_Spatial_Reference_Method: <xsl:value-of select="."
										/>
									</xsl:for-each>
									<xsl:for-each select="direct"> Direct_Spatial_Reference_Method:
											<xsl:value-of select="."/>
									</xsl:for-each>
									<xsl:for-each select="ptvctinf">
										Point_and_Vector_Object_Information: <xsl:for-each
											select="sdtsterm"> SDTS_Terms_Description: <xsl:for-each
												select="sdtstype">
												SDTS_Point_and_Vector_Object_Type: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="ptvctcnt">
												Point_and_Vector_Object_Count: <xsl:value-of
												select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="vpfterm"> VPF_Terms_Description:
												<xsl:for-each select="vpflevel"> VPF_Topology_Level:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="vpfinfo">
												VPF_Point_and_Vector_Object_Information:
												<xsl:for-each select="vpftype">
												VPF_Point_and_Vector_Object_Type: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="ptvctcnt">
												Point_and_Vector_Object_Count: <xsl:value-of
												select="."/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="rastinfo"> Raster_Object_Information:
											<xsl:for-each select="rasttype"> Raster_Object_Type:
												<xsl:value-of select="."/>
										</xsl:for-each>
										<xsl:for-each select="rowcount"> Row_Count: <xsl:value-of
												select="."/>
										</xsl:for-each>
										<xsl:for-each select="colcount"> Column_Count: <xsl:value-of
												select="."/>
										</xsl:for-each>
										<xsl:for-each select="vrtcount"> Vertical_Count:
												<xsl:value-of select="."/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
								<!-- Spatial Reference text blob gets put in the abstract if its present.-->
								<xsl:for-each select="$var_metadataRoot/spref">
									Spatial_Reference_Information: <xsl:for-each select="horizsys">
										Horizontal_Coordinate_System_Definition: <xsl:for-each
											select="geograph"> Geographic: <xsl:for-each
												select="latres"> Latitude_Resolution: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="longres"> Longitude_Resolution:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="geogunit">
												Geographic_Coordinate_Units: <xsl:value-of
												select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="planar"> Planar: <xsl:for-each
												select="mapproj"> Map_Projection: <xsl:for-each
												select="mapprojn"> Map_Projection_Name:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="albers">
												Albers_Conical_Equal_Area: </xsl:for-each>
												<xsl:for-each select="azimequi">
												Azimuthal_Equidistant: </xsl:for-each>
												<xsl:for-each select="equicon"> Equidistant_Conic: </xsl:for-each>
												<xsl:for-each select="equirect"> Equirectangular: </xsl:for-each>
												<xsl:for-each select="gvnsp">
												General_Vertical_Near-sided_Perspective: </xsl:for-each>
												<xsl:for-each select="gnomonic"> Gnomonic: </xsl:for-each>
												<xsl:for-each select="lamberta">
												Lambert_Azimuthal_Equal_Area: </xsl:for-each>
												<xsl:for-each select="lambertc">
												Lambert_Conformal_Conic: </xsl:for-each>
												<xsl:for-each select="mercator"> Mercator: </xsl:for-each>
												<xsl:for-each select="modsak">
												Modified_Stereographic_for_Alaska: </xsl:for-each>
												<xsl:for-each select="miller"> Miller_Cylindrical: </xsl:for-each>
												<xsl:for-each select="obqmerc"> Oblique_Mercator: </xsl:for-each>
												<xsl:for-each select="orthogr"> Orthographic: </xsl:for-each>
												<xsl:for-each select="polarst"> Polar_Stereographic: </xsl:for-each>
												<xsl:for-each select="polycon"> Polyconic: </xsl:for-each>
												<xsl:for-each select="robinson"> Robinson: </xsl:for-each>
												<xsl:for-each select="sinusoid"> Sinusoidal: </xsl:for-each>
												<xsl:for-each select="spaceobq">
												Space_Oblique_Mercator_(Landsat): </xsl:for-each>
												<xsl:for-each select="stereo"> Stereographic: </xsl:for-each>
												<xsl:for-each select="transmer">
												Transverse_Mercator: </xsl:for-each>
												<xsl:for-each select="vdgrin"> van_der_Grinten: </xsl:for-each>
												<xsl:apply-templates select="*"/>
												<!-- this is where the work gets done, in the template for each projection -->
											</xsl:for-each>
											<xsl:for-each select="gridsys"> Grid_Coordinate_System:
												<xsl:for-each select="gridsysn">
												Grid_Coordinate_System_Name: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="utm">
												Universal_Transverse_Mercator: <xsl:for-each
												select="utmzone"> UTM_Zone_Number: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="transmer">
												Transverse_Mercator: </xsl:for-each>
												<xsl:apply-templates select="transmer"/>
												</xsl:for-each>
												<xsl:for-each select="ups">
												Universal_Polar_Stereographic: <xsl:for-each
												select="upszone"> UPS_Zone_Identifier:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="polarst">
												Polar_Stereographic: </xsl:for-each>
												<xsl:apply-templates select="polarst"/>
												</xsl:for-each>
												<xsl:for-each select="spcs">
												State_Plane_Coordinate_System: <xsl:for-each
												select="spcszone"> SPCS_Zone_Identifier:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="lambertc">
												Lambert_Conformal_Conic: </xsl:for-each>
												<xsl:apply-templates select="lambertc"/>
												<xsl:for-each select="transmer">
												Transverse_Mercator: </xsl:for-each>
												<xsl:apply-templates select="transmer"/>
												<xsl:for-each select="obqmerc"> Oblique_Mercator: </xsl:for-each>
												<xsl:apply-templates select="obqmerc"/>
												<xsl:for-each select="polycon"> Polyconic: </xsl:for-each>
												<xsl:apply-templates select="polycon"/>
												</xsl:for-each>
												<xsl:for-each select="arcsys">
												ARC_Coordinate_System: <xsl:for-each
												select="arczone"> ARC_System_Zone_Identifier:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="equirect"> Equirectangular: </xsl:for-each>
												<xsl:apply-templates select="equirect"/>
												<xsl:for-each select="azimequi">
												Azimuthal_Equidistant: </xsl:for-each>
												<xsl:apply-templates select="azimequi"/>
												</xsl:for-each>
												<xsl:for-each select="othergrd">
												Other_Grid_System's_Definition: <xsl:value-of
												select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="localp"> Local_Planar:
												<xsl:for-each select="localpd">
												Local_Planar_Description: <xsl:value-of select="."
												/>
												</xsl:for-each>
												<xsl:for-each select="localpgi">
												Local_Planar_Georeference_Information:
												<xsl:value-of select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="planci">
												Planar_Coordinate_Information: <xsl:for-each
												select="plance">
												Planar_Coordinate_Encoding_Method: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="coordrep">
												Coordinate_Representation: <xsl:for-each
												select="absres"> Abscissa_Resolution:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="ordres">
												Ordinate_Resolution: <xsl:value-of select="."/>
												</xsl:for-each>
												</xsl:for-each>
												<xsl:for-each select="distbrep">
												Distance_and_Bearing_Representation: <xsl:for-each
												select="distres"> Distance_Resolution:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="bearres">
												Bearing_Resolution: <xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="bearunit"> Bearing_Units:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="bearrefd">
												Bearing_Reference_Direction: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="bearrefm">
												Bearing_Reference_Meridian: <xsl:value-of
												select="."/>
												</xsl:for-each>
												</xsl:for-each>
												<xsl:for-each select="plandu">
												Planar_Distance_Units: <xsl:value-of select="."/>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="local"> Local: <xsl:for-each
												select="localdes"> Local_Description: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="localgeo">
												Local_Georeference_Information: <xsl:value-of
												select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="geodetic"> Geodetic_Model:
												<xsl:for-each select="horizdn">
												Horizontal_Datum_Name: <xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="ellips"> Ellipsoid_Name:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="semiaxis"> Semi-major_Axis:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="denflat">
												Denominator_of_Flattening_Ratio: <xsl:value-of
												select="."/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="vertdef">
										Vertical_Coordinate_System_Definition: <xsl:for-each
											select="altsys"> Altitude_System_Definition:
												<xsl:for-each select="altdatum">
												Altitude_Datum_Name: <xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="altres"> Altitude_Resolution:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="altunits">
												Altitude_Distance_Units: <xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="altenc"> Altitude_Encoding_Method:
												<xsl:value-of select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="depthsys"> Depth_System_Definition:
												<xsl:for-each select="depthdn"> Depth_Datum_Name:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="depthres"> Depth_Resolution:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="depthdu"> Depth_Distance_Units:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="depthem"> Depth_Encoding_Method:
												<xsl:value-of select="."/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
								<!-- End spatial reference section -->
								<!-- Entity and Attribute -->
								<xsl:for-each select="$var_metadataRoot/eainfo">
									Entity_and_Attribute_Information: <xsl:for-each
										select="detailed"> Detailed_Description: <xsl:for-each
											select="enttyp"> Entity_Type: <xsl:for-each
												select="enttypl"> Entity_Label: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="enttypd"> Entity_Definition:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="enttypds"> Definition_Source:
												<xsl:value-of select="."/>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="attr"> Attribute: <xsl:for-each
												select="attrlabl"> Attribute_Label: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="attrdef"> Attribute_Definition:
												<xsl:value-of select="."/>
											</xsl:for-each>
											<xsl:for-each select="attrdefs">
												Attribute_Definition_Source: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="attrdomv">
												Attribute_Domain_Values: <xsl:for-each select="edom"> Enumerated_Domain: <xsl:for-each select="edomv">
												Enumerated_Domain_Value: <xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="edomvd">
												Enumerated_Domain_Value_Definition: <xsl:value-of
												select="."/>
												</xsl:for-each>
												<xsl:for-each select="edomvds">
												Enumerated_Domain_Value_Definition_Source:
												<xsl:value-of select="."/>
												</xsl:for-each> Domain Value Attribute:
												<xsl:apply-templates select="attr"/>
												</xsl:for-each>
												<!-- end enumerated domain -->
												<xsl:for-each select="rdom"> Range_Domain:
												<xsl:for-each select="rdommin">
												Range_Domain_Minimum: <xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="rdommax">
												Range_Domain_Maximum: <xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="attrunit">
												Attribute_Units_of_Measure: <xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="attrmres">
												Attribute_Measurement_Resolution: <xsl:value-of select="."/>
												</xsl:for-each> Range Domain Attribute:
												<xsl:apply-templates select="attr"/>
												</xsl:for-each>
												<xsl:for-each select="codesetd"> Codeset_Domain:
												<xsl:for-each select="codesetn"> Codeset_Name:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="codesets"> Codeset_Source:
												<xsl:value-of select="."/>
												</xsl:for-each>
												</xsl:for-each>
												<xsl:for-each select="udom"> Unrepresentable_Domain:
												<xsl:value-of select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="begdatea">
												Beginning_Date_of_Attribute_Values: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="enddatea">
												Ending_Date_of_Attribute_Values: <xsl:value-of
												select="."/>
											</xsl:for-each>
											<xsl:for-each select="attrvai">
												Attribute_Value_Accuracy_Information: <xsl:for-each
												select="attrva"> Attribute_Value_Accuracy:
												<xsl:value-of select="."/>
												</xsl:for-each>
												<xsl:for-each select="attrvae">
												Attribute_Value_Accuracy_Explanation:
												<xsl:value-of select="."/>
												</xsl:for-each>
											</xsl:for-each>
											<xsl:for-each select="attrmfrq">
												Attribute_Measurement_Frequency: <xsl:value-of
												select="."/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
									<xsl:for-each select="overview"> Overview_Description:
											<xsl:for-each select="eaover">
											Entity_and_Attribute_Overview: <xsl:value-of select="string(.)"
											/>
										</xsl:for-each>
										<xsl:for-each select="eadetcit">
											Entity_and_Attribute_Detail_Citation: <xsl:value-of
												select="string(.)"/>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
								<!-- end of Entity Attribute section text blob, end of text for abstract element -->
								<!--  /xsl:template -->
							</gco:CharacterString>
						</gmd:abstract>
						
						<xsl:for-each select="descript/purpose">
							<gmd:purpose>
								<gco:CharacterString>
									<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
								</gco:CharacterString>
							</gmd:purpose>
						</xsl:for-each>
						<xsl:for-each select="datacred">
							<gmd:credit>
								<gco:CharacterString>
									<xsl:value-of select="fn:normalize-space(xs:string(.))"/>
								</gco:CharacterString>
							</gmd:credit>
						</xsl:for-each>
						<xsl:for-each select="$var_idinfoSourceNode/status/progress">
						<gmd:status>
							<gmd:MD_ProgressCode>
								<!-- csdgm allows {"Complete", "In work", "Planned"}
								map to ISO {completed, underDevelopment, planned}-->
								<xsl:variable name="var_csdgmProgressCode">
									<xsl:value-of select="'complete, in work, planned'"/>
								</xsl:variable>
									<xsl:attribute name="codeList">
										<xsl:choose>
											<xsl:when
												test="contains($var_csdgmProgressCode,fn:lower-case(fn:normalize-space(fn:string(.))))">
												<xsl:value-of
												select="string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ProgressCode')"
												/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of
												select="string('http://www.opengis.net/def/nil/OGC/0/missing')"
												/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
								<xsl:variable name="var_theProgCode">
									<xsl:value-of select="fn:lower-case(fn:normalize-space(fn:string(.)))"/>
								</xsl:variable>
									<xsl:attribute name="codeListValue">
											<xsl:choose>
											<xsl:when test="contains($var_theProgCode,'complete')">
												<xsl:value-of select="'completed'"/>
											</xsl:when>
											<xsl:when test="contains($var_theProgCode,'work')">
												<xsl:value-of select="'underDevelopment'"/>
											</xsl:when>
											<xsl:when test="contains($var_theProgCode,'planned')">
												<xsl:value-of select="'planned'"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="$var_theProgCode"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:attribute>
								<xsl:value-of select="$var_theProgCode"/>
								</gmd:MD_ProgressCode>
							
						</gmd:status>
						</xsl:for-each> <!-- check for status/progress -->
			<!-- ******************************************************************************** -->			
						
						<xsl:for-each select="ptcontac">
							<gmd:pointOfContact>
								<!-- ptcontac/cntinfo -->
								<xsl:for-each select="cntinfo">
									<!-- xsl:variable name="var_ptcontac-cntinfo_node" select="."/ -->
									<gmd:CI_ResponsibleParty>
										<xsl:call-template name="usgin:contactName">
											<xsl:with-param name="the-cntinfo" select="."/>
										</xsl:call-template>
										<gmd:contactInfo>
											<xsl:call-template name="usgin:contactHandler">
												<xsl:with-param name="the-cntinfo" select="."/>
											</xsl:call-template>
										</gmd:contactInfo>
										<gmd:role>
											<gmd:CI_RoleCode>
												<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string(xs:anyURI('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode'))"
												/>
												</xsl:attribute>
												<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string(xs:anyURI('pointOfContact'))"/>
												</xsl:attribute>
												<xsl:attribute name="codeSpace">
												<xsl:value-of select="xs:string(xs:anyURI('007'))"
												/>
												</xsl:attribute>
												<xsl:value-of select="'pointOfContact'"/>
											</gmd:CI_RoleCode>
										</gmd:role>
									</gmd:CI_ResponsibleParty>
								</xsl:for-each>
							</gmd:pointOfContact>
						</xsl:for-each>
						<!-- +++ Resource maintenance frequency section -->
						<xsl:if test="fn:exists(status/update)">
						<gmd:resourceMaintenance>
							<gmd:MD_MaintenanceInformation>
								<gmd:maintenanceAndUpdateFrequency>
									<xsl:variable name="var338_result_vmf11_inputtoresult">
										<xsl:call-template name="vmf:updateFrequency">
											<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(xs:string(status/update)))"
											/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var338_result_vmf11_inputtoresult)">
										<gmd:MD_MaintenanceFrequencyCode>
											<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_MaintenanceFrequencyCode')"
												/>
											</xsl:attribute>
											<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string($var338_result_vmf11_inputtoresult)"
												/>
											</xsl:attribute>
											<xsl:variable name="var337_result_vmf12_inputtoresult">
												<xsl:call-template name="vmf:updateFrequencyCode">
												<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(xs:string(status/update)))"
												/>
												</xsl:call-template>
											</xsl:variable>

											<xsl:if
												test="fn:exists($var337_result_vmf12_inputtoresult)">
												<xsl:attribute name="codeSpace">
												<xsl:value-of
												select="xs:string($var337_result_vmf12_inputtoresult)"
												/>
												</xsl:attribute>
											</xsl:if>
											<xsl:value-of
												select="$var338_result_vmf11_inputtoresult"/>
										</gmd:MD_MaintenanceFrequencyCode>
									</xsl:if>
								</gmd:maintenanceAndUpdateFrequency>
							</gmd:MD_MaintenanceInformation>
						</gmd:resourceMaintenance>
						</xsl:if>
						<xsl:for-each select="$var_metadataRoot/eainfo/detailed/attr">
							<xsl:variable name="var_currentattr" select="string(attrlabl)"/>
							<xsl:if test="fn:exists(attrmfrq)">
							<!-- detailed entity attribute section, attribute Measurement frequency -->
							<gmd:resourceMaintenance>
								<gmd:MD_MaintenanceInformation>
									<gmd:maintenanceAndUpdateFrequency>
										<xsl:variable name="var_lookupUpdateFrequency">
											<xsl:call-template name="vmf:updateFrequency">
												<xsl:with-param name="input"
													select="fn:upper-case(fn:normalize-space(xs:string(attrmfrq)))"
												/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:if test="fn:exists($var_lookupUpdateFrequency)">
											<gmd:MD_MaintenanceFrequencyCode>
												<xsl:attribute name="codeList">
													<xsl:value-of
														select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_MaintenanceFrequencyCode')"
													/>
												</xsl:attribute>
												<xsl:attribute name="codeListValue">
													<xsl:value-of
														select="xs:string($var_lookupUpdateFrequency)"
													/>
												</xsl:attribute>
												<xsl:variable
													name="var_lookupUpdateFrequencyCode">
													<xsl:call-template name="vmf:updateFrequencyCode">
														<xsl:with-param name="input"
															select="fn:upper-case(fn:normalize-space(xs:string(attrmfrq)))"
														/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if
													test="fn:exists($var_lookupUpdateFrequencyCode)">
													<xsl:attribute name="codeSpace">
														<xsl:value-of
															select="xs:string($var_lookupUpdateFrequencyCode)"
														/>
													</xsl:attribute>
												</xsl:if>
												<xsl:value-of
													select="$var_lookupUpdateFrequency"/>
											</gmd:MD_MaintenanceFrequencyCode>
										</xsl:if>
									</gmd:maintenanceAndUpdateFrequency>
									<gmd:updateScope>
										<gmd:MD_ScopeCode>
											<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ScopeCode')"
												/>
											</xsl:attribute>
											<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string('attribute')"/>
											</xsl:attribute>
										</gmd:MD_ScopeCode>
									</gmd:updateScope>
								</gmd:MD_MaintenanceInformation>
							</gmd:resourceMaintenance>
							</xsl:if>
						</xsl:for-each>
						<!-- Handle browse graphic if it exists -->
						<xsl:for-each select="browse">
							<gmd:graphicOverview>
								<gmd:MD_BrowseGraphic>
									<gmd:fileName>
										<gco:CharacterString>
											<xsl:value-of select="xs:string(browsen)"/>
										</gco:CharacterString>
									</gmd:fileName>
									<gmd:fileDescription>
										<gco:CharacterString>
											<xsl:value-of select="xs:string(browsed)"/>
										</gco:CharacterString>
									</gmd:fileDescription>
									<gmd:fileType>
										<gco:CharacterString>
											<xsl:value-of select="xs:string(browset)"/>
										</gco:CharacterString>
									</gmd:fileType>
								</gmd:MD_BrowseGraphic>
							</gmd:graphicOverview>
						</xsl:for-each>
						<!-- handle Keywords, grouped by theme with a thesaurus element for each theme -->
						<!-- if ...kt (keyword thesaurus) is missing, fgdc xml should be invalid, but in real world... -->

						<xsl:for-each select="keywords/theme">
							<gmd:descriptiveKeywords>
								<gmd:MD_Keywords>
									<xsl:for-each select="themekey">
										<gmd:keyword>
											<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(.))"/>
											</gco:CharacterString>
										</gmd:keyword>
									</xsl:for-each>
									<gmd:type>
										<gmd:MD_KeywordTypeCode
											codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_KeywordTypeCode"
											codeListValue="theme" codeSpace="005">
											<xsl:value-of select="'theme'"/>
										</gmd:MD_KeywordTypeCode>
									</gmd:type>
									<xsl:choose>
										<xsl:when test="fn:exists(themekt)">
											<gmd:thesaurusName>
												<gmd:CI_Citation>
												<gmd:title>
												<gco:CharacterString>
												<xsl:value-of select="fn:normalize-space(themekt)"
												/>
												</gco:CharacterString>
												</gmd:title>
												<gmd:date>
												<xsl:attribute name="gco:nilReason">
												<xsl:value-of select="xs:string('unknown')"/>
												</xsl:attribute>
												</gmd:date>
												</gmd:CI_Citation>
											</gmd:thesaurusName>
										</xsl:when>
										<xsl:otherwise>
											<gmd:thesaurusName gco:nilReason="missing"/>
										</xsl:otherwise>
									</xsl:choose>

								</gmd:MD_Keywords>
							</gmd:descriptiveKeywords>
						</xsl:for-each>

						<xsl:for-each select="keywords/place">
							<gmd:descriptiveKeywords>
								<gmd:MD_Keywords>
									<xsl:for-each select="placekey">
										<gmd:keyword>
											<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(.))"/>
											</gco:CharacterString>
										</gmd:keyword>
									</xsl:for-each>
									<gmd:type>
										<gmd:MD_KeywordTypeCode
											codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_KeywordTypeCode"
											codeListValue="place" codeSpace="002">
											<xsl:value-of select="'place'"/>
										</gmd:MD_KeywordTypeCode>
									</gmd:type>
									<xsl:choose>
										<xsl:when test="fn:exists(placekt)">
											<gmd:thesaurusName>
												<gmd:CI_Citation>
												<gmd:title>
												<gco:CharacterString>
												<xsl:value-of select="fn:normalize-space(placekt)"
												/>
												</gco:CharacterString>
												</gmd:title>
												<gmd:date>
												<xsl:attribute name="gco:nilReason">
												<xsl:value-of select="xs:string('unknown')"/>
												</xsl:attribute>
												</gmd:date>
												</gmd:CI_Citation>
											</gmd:thesaurusName>
										</xsl:when>
										<xsl:otherwise>
											<gmd:thesaurusName gco:nilReason="missing"/>
										</xsl:otherwise>
									</xsl:choose>

								</gmd:MD_Keywords>
							</gmd:descriptiveKeywords>
						</xsl:for-each>
						<!--	</xsl:otherwise>
							</xsl:choose>-->
						<!-- stratum keywords -->
						<!-- alternate logic for thesaurus name -->
						<!--xsl for-each-group select="keywords/stratum" group-by="xs:string(xs:string(stratkt))">
								<xsl:variable name="var364_cur_result_groupby" as="item()+" select="current-group()"/>
								<xsl:variable name="var365_cur_result_groupby"  select="current-grouping-key()"/ -->
						<xsl:for-each select="keywords/stratum">
							<gmd:descriptiveKeywords>
								<gmd:MD_Keywords>
									<xsl:for-each select="stratkey">
										<gmd:keyword>
											<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(.))"/>
											</gco:CharacterString>
										</gmd:keyword>
									</xsl:for-each>
									<gmd:type>
										<gmd:MD_KeywordTypeCode
											codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_KeywordTypeCode"
											codeListValue="stratum" codeSpace="003">
											<xsl:value-of select="'stratum'"/>
										</gmd:MD_KeywordTypeCode>
									</gmd:type>
									<xsl:choose>
										<xsl:when test="fn:exists(stratkt)">
											<gmd:thesaurusName>
												<gmd:CI_Citation>
												<gmd:title>
												<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(stratkt))"/>
												</gco:CharacterString>
												</gmd:title>
												<gmd:date>
												<xsl:attribute name="gco:nilReason">
												<xsl:value-of
												select="xs:string(xs:string('unknown'))"/>
												</xsl:attribute>
												</gmd:date>
												</gmd:CI_Citation>
											</gmd:thesaurusName>
										</xsl:when>
										<xsl:otherwise>
											<gmd:thesaurusName gco:nilReason="missing"/>
										</xsl:otherwise>
									</xsl:choose>
								</gmd:MD_Keywords>
							</gmd:descriptiveKeywords>
						</xsl:for-each>
						<!--						<xsl:if test="fn:string-length(xs:string(keywords/temporal[1]/tempkey[1]))>0">-->
						<xsl:for-each select="keywords/temporal">
							<!--xsl:variable name="var370_cur_result_groupby" as="item()+" select="current-group()"/>
								<xsl:variable name="var371_cur_result_groupby"  select="current-grouping-key()"/ -->
							<gmd:descriptiveKeywords>
								<gmd:MD_Keywords>
									<xsl:for-each select="tempkey">
										<gmd:keyword>
											<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(.))"/>
											</gco:CharacterString>
										</gmd:keyword>
									</xsl:for-each>
									<gmd:type>
										<gmd:MD_KeywordTypeCode
											codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_KeywordTypeCode"
											codeListValue="temporal" codeSpace="004">
											<xsl:value-of select="'temporal'"/>
										</gmd:MD_KeywordTypeCode>
									</gmd:type>
									<xsl:choose>
										<xsl:when test="fn:exists(tempkt)">
											<gmd:thesaurusName>
												<gmd:CI_Citation>
												<gmd:title>
												<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(tempkt))"/>
												</gco:CharacterString>
												</gmd:title>
												<gmd:date>
												<xsl:attribute name="gco:nilReason">
												<xsl:value-of
												select="xs:string(xs:string('unknown'))"/>
												</xsl:attribute>
												</gmd:date>
												</gmd:CI_Citation>
											</gmd:thesaurusName>
										</xsl:when>
										<xsl:otherwise>
											<gmd:thesaurusName gco:nilReason="missing"/>
										</xsl:otherwise>
									</xsl:choose>
								</gmd:MD_Keywords>
							</gmd:descriptiveKeywords>
						</xsl:for-each>
						<!--</xsl:if>-->
						<!-- resource constraints section, distribution liability, access constraint, and use constraints get concatenated into a single gmd:useConstraint 
								text blob -->
						<xsl:variable name="var_distributionLiability_exists">
							<xsl:if test="fn:exists($var_metadataRoot/distinfo/distliab)">
								<xsl:value-of
									select="fn:concat('Distribution Liability: ', fn:string-join($var_metadataRoot/distinfo/distliab, ' '))"
								/>
							</xsl:if>
						</xsl:variable>
						<xsl:variable name="var_accessConstraints_exists">
							<xsl:if test="fn:exists(accconst)">
								<xsl:value-of
									select="fn:concat('Access Constraints: ', fn:string-join($var_metadataRoot//idinfo/accconst, ' '))"
								/>
							</xsl:if>
						</xsl:variable>
						<xsl:variable name="var_useLimitation_exists">
							<xsl:if test="fn:exists(useconst)">
								<xsl:value-of
									select="fn:concat('Use Limitation: ', fn:string-join($var_metadataRoot/idinfo/useconst, ' '))"
								/>
							</xsl:if>
						</xsl:variable>
						<xsl:if
							test="fn:exists($var_distributionLiability_exists) or fn:exists($var_accessConstraints_exists) or fn:exists($var_useLimitation_exists)">
							<gmd:resourceConstraints>
								<gmd:MD_LegalConstraints>
									<xsl:if test="fn:exists($var_accessConstraints_exists)">
										<gmd:accessConstraints>
											<gmd:MD_RestrictionCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_RestrictionCode"
												codeListValue="otherRestrictions" codeSpace="008">
												<xsl:value-of select="'otherRestrictions'"/>
											</gmd:MD_RestrictionCode>
										</gmd:accessConstraints>
									</xsl:if>
									<xsl:if test="fn:exists($var_useLimitation_exists)">
										<gmd:useConstraints>
											<gmd:MD_RestrictionCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_RestrictionCode"
												codeListValue="otherRestrictions" codeSpace="008">
												<xsl:value-of select="'otherRestrictions'"/>
											</gmd:MD_RestrictionCode>
										</gmd:useConstraints>
									</xsl:if>
									<gmd:otherConstraints>
										<gco:CharacterString>
											<xsl:value-of
												select="fn:normalize-space(fn:concat( $var_accessConstraints_exists, ' ',   $var_useLimitation_exists, ' ',   $var_distributionLiability_exists))"
											/>
										</gco:CharacterString>
									</gmd:otherConstraints>
								</gmd:MD_LegalConstraints>
							</gmd:resourceConstraints>
						</xsl:if>
						<xsl:for-each select="secinfo">
							<gmd:resourceConstraints>
								<gmd:MD_SecurityConstraints>
									<gmd:classification>
										<xsl:variable name="var388_result_securityClassType">
											<xsl:call-template name="vmf:securityClassType">
												<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(xs:string(secclass)))"
												/>
											</xsl:call-template>
										</xsl:variable>
										<!--											<xsl:variable name="var385_cond_result_exists"  select="(if (fn:exists($var388_result_securityClassType)) then $var388_result_securityClassType else ())"/>-->
										<xsl:if test="fn:exists($var388_result_securityClassType)">
											<gmd:MD_ClassificationCode>
												<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string(xs:anyURI('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ClassificationCode'))"
												/>
												</xsl:attribute>
												<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string($var388_result_securityClassType)"
												/>
												</xsl:attribute>
												<xsl:variable name="var387_result_securityClassCode">
												<xsl:call-template name="vmf:securityClassCode">
												<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(xs:string(xs:string(secclass))))"
												/>
												</xsl:call-template>
												</xsl:variable>
												<!--													<xsl:variable name="var386_cond_result_exists"  select="(if (fn:exists($var387_result_securityClassCode)) then $var387_result_securityClassCode else ())"/>-->
												<xsl:if
												test="fn:exists($var387_result_securityClassCode)">
												<xsl:attribute name="codeSpace">
												<xsl:value-of
												select="xs:string($var387_result_securityClassCode)"
												/>
												</xsl:attribute>
												</xsl:if>
												<xsl:value-of
												select="$var388_result_securityClassType"/>
											</gmd:MD_ClassificationCode>
										</xsl:if>
									</gmd:classification>
									<gmd:classificationSystem>
										<gco:CharacterString>
											<xsl:value-of select="xs:string(secsys)"/>
										</gco:CharacterString>
									</gmd:classificationSystem>
									<gmd:handlingDescription>
										<gco:CharacterString>
											<xsl:value-of select="xs:string(sechandl)"/>
										</gco:CharacterString>
									</gmd:handlingDescription>
								</gmd:MD_SecurityConstraints>
							</gmd:resourceConstraints>
						</xsl:for-each>
						<!--  put in relationships to larger work and cross references using gmd:aggregationInfo elements -->
						<xsl:for-each select="citation/citeinfo/lworkcit">
							<!--<xsl:variable name="var_largerWorkCitationNode" select="."/>-->
							<gmd:aggregationInfo>
								<gmd:MD_AggregateInformation>
									<xsl:for-each select="citeinfo">
										<gmd:aggregateDataSetName>
										<xsl:call-template name="usgin:citinfoHandler">
											<xsl:with-param name="theciteinfo" select="."/>
										</xsl:call-template>
									</gmd:aggregateDataSetName>
									</xsl:for-each>
									<gmd:associationType>
										<gmd:DS_AssociationTypeCode codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#DS_AssociationTypeCode"
											codeListValue="largerWorkCitation" codeSpace="002">
											<xsl:value-of select="'largerWorkCitation'"/>
										</gmd:DS_AssociationTypeCode>
									</gmd:associationType>
								</gmd:MD_AggregateInformation>
							</gmd:aggregationInfo>
						</xsl:for-each>
						<!-- idinfo/crossref cross references -->
						<xsl:for-each select="crossref">
							<gmd:aggregationInfo>
								<gmd:MD_AggregateInformation>
									<xsl:variable name="var693_crossref" select="."/>
									<xsl:for-each select="citinfo">
									<gmd:aggregateDataSetName>
										<xsl:call-template name="usgin:citinfoHandler">
											<xsl:with-param name="theciteinfo" select="."/>
										</xsl:call-template>
									</gmd:aggregateDataSetName>
									</xsl:for-each>
									<gmd:associationType>
										<gmd:DS_AssociationTypeCode>

											<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#DS_AssociationTypeCode')"
												/>
											</xsl:attribute>
											<xsl:attribute name="codeListValue">
												<xsl:value-of select="xs:string('crossReference')"/>
											</xsl:attribute>
											<xsl:attribute name="codeSpace">
												<xsl:value-of select="xs:string('001')"/>
											</xsl:attribute>
											<xsl:value-of select="'CSDGM cross reference'"/>
										</gmd:DS_AssociationTypeCode>
									</gmd:associationType>
								</gmd:MD_AggregateInformation>
							</gmd:aggregationInfo>
						</xsl:for-each>

						<!-- ******************************************************************************************************************* -->
						<!-- Spatial Representation -->
						<xsl:for-each select="$var_metadataRoot/spdoinfo">
							<gmd:spatialRepresentationType>
								<xsl:for-each select="direct">
									<xsl:variable name="var563_result_spatialRepresentationType">
										<xsl:call-template name="vmf:spatialRepresentationType">
											<xsl:with-param name="input"
												select="fn:upper-case(fn:normalize-space(fn:string(.)))"
											/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if
										test="fn:exists($var563_result_spatialRepresentationType)">
										<gmd:MD_SpatialRepresentationTypeCode>
											<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string(xs:anyURI('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_SpatialRepresentationTypeCode'))"
												/>
											</xsl:attribute>
											<xsl:attribute name="codeListValue">
												<xsl:value-of
												select="xs:string(xs:anyURI($var563_result_spatialRepresentationType))"
												/>
											</xsl:attribute>
											<xsl:variable
												name="var564_result_spatialRepresentationCode">
												<xsl:call-template
												name="vmf:spatialRepresentationCode">
												<xsl:with-param name="input"
												select="$var563_result_spatialRepresentationType"
												/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:if
												test="fn:exists($var564_result_spatialRepresentationCode)">
												<xsl:attribute name="codeSpace">
												<xsl:value-of
												select="xs:string(xs:anyURI($var564_result_spatialRepresentationCode))"
												/>
												</xsl:attribute>
											</xsl:if>
											<xsl:value-of
												select="$var563_result_spatialRepresentationType"/>
										</gmd:MD_SpatialRepresentationTypeCode>
									</xsl:if>
								</xsl:for-each>
							</gmd:spatialRepresentationType>
						</xsl:for-each>
						<!-- resource language -->
						<gmd:language>
							<gco:CharacterString>
								<xsl:value-of select="'eng'"/>
							</gco:CharacterString>
						</gmd:language>
						<!-- messy logic to extract ISO topic category  -->
						<xsl:variable name="hasISOtopic">
							<xsl:for-each select="keywords/theme">
								<xsl:for-each select="themekey">
									<xsl:if
										test="fn:contains(' biota boundaries climatologyMeteorologyAtmosphere 
economy elevation environment farming geoscientificInformation 
health imageryBaseMapsEarthCover inlandWaters intelligenceMilitary 
location oceans planningCadastre society structure transportation 
utilitiesCommunication', concat(' ',string(.)))">
										<!-- set hasISOtopic variable -->
										<xsl:value-of select="string(.)"/>
									</xsl:if>
								</xsl:for-each>
								<!--		</xsl:if>  -->
							</xsl:for-each>
							<!--	 flag to indicate if catch an ISO topic -->
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="string-length($hasISOtopic)>0">
								<gmd:topicCategory>
									<gmd:MD_TopicCategoryCode>
										<xsl:value-of select="string($hasISOtopic)"/>
									</gmd:MD_TopicCategoryCode>
								</gmd:topicCategory>
								<xsl:value-of select="$hasISOtopic"/>
							</xsl:when>
							<xsl:otherwise>
								<gmd:topicCategory gco:nilReason="missing">
									<gmd:MD_TopicCategoryCode>
										<!-- put in a dummy value so will pass profile rules -->
										<xsl:value-of select="string('geoscientificInformation')"/>
									</gmd:MD_TopicCategoryCode>
								</gmd:topicCategory>
							</xsl:otherwise>
						</xsl:choose>
						<!-- end topic category section -->
						<xsl:for-each select="native">
							<xsl:variable name="var_nativeEnvironmentNode" select="."/>
							<gmd:environmentDescription>
								<xsl:variable name="var574_cond_result_exists">
									<xsl:choose>
										<xsl:when
											test="fn:exists($var_metadataRoot/distinfo/techpreq)">
											<xsl:variable name="var579_map_select_distinfo">
												<xsl:for-each
												select="$var_metadataRoot/distinfo/techpreq">
												<xsl:value-of select="xs:string(.)"/>
												</xsl:for-each>
											</xsl:variable>
											<xsl:if test="fn:exists($var579_map_select_distinfo)">
												<xsl:value-of
												select="fn:string-join($var579_map_select_distinfo, ' ')"
												/>
											</xsl:if>
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="' '"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:for-each select="$var574_cond_result_exists">
									<gco:CharacterString>
										<xsl:variable name="var577_cond_result_exists">
											<xsl:if
												test="(fn:exists($var_metadataRoot/distinfo/techpreq))">
												<xsl:value-of
												select="string(' Technical Prerequisites: ')"/>
											</xsl:if>
										</xsl:variable>
										<xsl:value-of
											select="fn:string(fn:concat('Native Dataset Environment: ', xs:string($var_nativeEnvironmentNode), $var577_cond_result_exists, .))"
										/>
									</gco:CharacterString>
								</xsl:for-each>
							</gmd:environmentDescription>
						</xsl:for-each>
						<!-- Extent section, geographic, vertical, temporal... -->
						<gmd:extent>
							<gmd:EX_Extent>
								<xsl:attribute name="id">
									<xsl:value-of select="generate-id()"/>
								</xsl:attribute>
								<gmd:geographicElement>
									<!-- bounding box is mandatory, spatial reference should be EPSG 4326, ie WGS 84 -->
									<!-- geographic extent, lat long bounding box required for USGIN -->
									<gmd:EX_GeographicBoundingBox>
										<xsl:attribute name="id">
											<xsl:value-of select="fn:concat('gbb.', generate-id())"
											/>
										</xsl:attribute>
										<gmd:westBoundLongitude>
											<gco:Decimal>
												<xsl:choose>
													<xsl:when test="number(spdom/bounding/westbc)=number(spdom/bounding/westbc)">
														<xsl:value-of select="xs:string(xs:decimal(spdom/bounding/westbc))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="xs:string(-179.9)"/>
													</xsl:otherwise>
												</xsl:choose>
											</gco:Decimal>
										</gmd:westBoundLongitude>
										<gmd:eastBoundLongitude>
											<gco:Decimal>
												<xsl:choose>
												<xsl:when
												test="number(spdom/bounding/eastbc) = number(spdom/bounding/eastbc)">
												<xsl:value-of
												select="xs:string(xs:decimal(spdom/bounding/eastbc))"
												/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of select="xs:string(-60)"/>
												</xsl:otherwise>
												</xsl:choose>
											</gco:Decimal>
										</gmd:eastBoundLongitude>
										<gmd:southBoundLatitude>
											<gco:Decimal>
												<xsl:choose>
												<xsl:when
												test="number(spdom/bounding/southbc)=number(spdom/bounding/southbc)">
												<xsl:value-of
												select="xs:string(xs:decimal(spdom/bounding/southbc))"
												/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of select="xs:string(14)"/>
												</xsl:otherwise>
												</xsl:choose>
											</gco:Decimal>
										</gmd:southBoundLatitude>
										<gmd:northBoundLatitude>
											<gco:Decimal>
												<xsl:choose>
												<xsl:when
												test="number(spdom/bounding/northbc)=number(spdom/bounding/northbc)">
												<xsl:value-of
												select="xs:string(xs:decimal(spdom/bounding/northbc))"
												/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of select="xs:string(170)"/>
												</xsl:otherwise>
												</xsl:choose>
											</gco:Decimal>
										</gmd:northBoundLatitude>
									</gmd:EX_GeographicBoundingBox>
								</gmd:geographicElement>
								<xsl:for-each select="spdom/dsgpoly">
									<gmd:geographicElement>
										<!-- handle extent encoded as a polygon -->
										<xsl:variable name="var582_dsgpoly" select="."/>
										<gmd:EX_BoundingPolygon>
											<gmd:polygon>
												<gml:Polygon>
												<xsl:attribute name="gml:id">
												<xsl:value-of
												select="fn:concat('boundingPoly.',generate-id())"
												/>
												</xsl:attribute>
												<gml:interior>
												<gml:LinearRing>
												<gml:coordinates>
												<xsl:variable name="var587_map_select_grngpoin">
												<xsl:for-each select="dsgpolyo/grngpoin">
												<xsl:value-of
												select="fn:concat(xs:string(gringlat), ', ', xs:string(gringlon), '; ')"
												/>
												</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="var584_cond_result_exists">
												<xsl:choose>
												<xsl:when
												test="fn:exists($var587_map_select_grngpoin)">
												<xsl:for-each select="dsgpolyo/grngpoin">
												<xsl:value-of
												select="fn:concat(xs:string(gringlat), ', ', xs:string(gringlon), '; ')"
												/>
												</xsl:for-each>
												</xsl:when>
												<xsl:otherwise>
												<xsl:for-each select="dsgpolyo/gring">
												<xsl:value-of select="xs:string(.)"/>
												</xsl:for-each>
												</xsl:otherwise>
												</xsl:choose>
												</xsl:variable>
												<xsl:for-each select="$var584_cond_result_exists">
												<xsl:attribute name="decimal">
												<xsl:value-of select="fn:normalize-space(.)"/>
												</xsl:attribute>
												</xsl:for-each>
												</gml:coordinates>
												</gml:LinearRing>
												</gml:interior>
												</gml:Polygon>
											</gmd:polygon>
										</gmd:EX_BoundingPolygon>
									</gmd:geographicElement>
								</xsl:for-each>
								<!-- temporal extent, single date -->
								<xsl:for-each select="timeperd/timeinfo/sngdate">
									<xsl:variable name="var_extentSingleDate" select="."/>
									<gmd:temporalElement>
										<gmd:EX_TemporalExtent>
											<xsl:attribute name="id">
												<xsl:value-of
												select="fn:concat('TempEx.', generate-id())"/>
											</xsl:attribute>
											<gmd:extent>												
												<xsl:choose>
													<xsl:when
														test="fn:contains(fn:lower-case(fn:string(caldate)), 'unknown') or fn:contains(fn:lower-case(fn:string(caldate)), 'unpublished')">
														<xsl:attribute name="gco:nilReason">
															<xsl:value-of select="fn:lower-case(fn:normalize-space(fn:string(caldate)))"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<gml:TimeInstant>
															<xsl:attribute name="gml:id">
																<xsl:value-of select="fn:concat('TInst.',generate-id())"/>
															</xsl:attribute>
															<!-- context is metadata/idinfo -->
															<xsl:if test="fn:exists($var_metadataRoot/idinfo/timeperd/current)">
																<gml:description>
																	<xsl:value-of
																		select="xs:string($var_metadataRoot/idinfo/timeperd/current)"
																	/>
																</gml:description>
															</xsl:if>
															<!-- now process the dates -->
															<!--						<xsl:variable name="var_DateTemp"> -->
															<xsl:variable name="var_TimePos">
																<xsl:call-template name="usgin:TimePositionFormat">
																	<xsl:with-param name="inputDate" select="caldate"/>
																	<xsl:with-param name="inputTime" select="time"/>
																</xsl:call-template>
															</xsl:variable>
															<gml:timePosition>
																<xsl:variable name="castableAsDateTime">
																	<xsl:value-of
																		select="(substring($var_TimePos,5,1)='-') and (substring($var_TimePos,8,1)='-') and (substring($var_TimePos,11,1)='T') and (substring($var_TimePos,14,1)=':') and (substring($var_TimePos,17,1)=':')"
																	/>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($castableAsDateTime)='true'">
																		<xsl:value-of select="$var_TimePos"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="indeterminatePosition">
																			<xsl:value-of select="xs:string('unknown')"/>
																		</xsl:attribute>
																	</xsl:otherwise>
																</xsl:choose>
															</gml:timePosition>
														</gml:TimeInstant>
													</xsl:otherwise>
												</xsl:choose>
											</gmd:extent>
										</gmd:EX_TemporalExtent>
									</gmd:temporalElement>
								</xsl:for-each>
								<!-- temmporal extent, multiple individual dates and times. 
						 guess the idea is there might be multple mdattim/sngdate elements?-->
								<xsl:for-each select="timeperd/timeinfo/mdattim/sngdate">
									<!-- iterate over sngdate elements in mdattim -->
								<!--	<xsl:variable name="var_mdattmdate" select="."/>-->
									<gmd:temporalElement>
										<gmd:EX_TemporalExtent>
											<xsl:attribute name="id">
												<xsl:value-of
												select="fn:concat('TimePeriodEx.', generate-id())"
												/>
											</xsl:attribute>
											<gmd:extent>
												<xsl:choose>
													<xsl:when
														test="fn:contains(fn:lower-case(fn:string(caldate)), 'unknown') or fn:contains(fn:lower-case(fn:string(caldate)), 'unpublished')">
														<xsl:attribute name="gco:nilReason">
															<xsl:value-of select="fn:lower-case(fn:normalize-space(fn:string(caldate)))"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<gml:TimeInstant>
															<xsl:attribute name="gml:id">
																<xsl:value-of select="fn:concat('TInst.',generate-id())"/>
															</xsl:attribute>
															<!-- context is metadata/idinfo -->
															<xsl:if test="fn:exists($var_metadataRoot/idinfo/timeperd/current)">
																<gml:description>
																	<xsl:value-of
																		select="xs:string($var_metadataRoot/idinfo/timeperd/current)"
																	/>
																</gml:description>
															</xsl:if>
															<!-- now process the dates -->
															<!--						<xsl:variable name="var_DateTemp"> -->
															<xsl:variable name="var_TimePos">
																<xsl:call-template name="usgin:TimePositionFormat">
																	<xsl:with-param name="inputDate" select="caldate"/>
																	<xsl:with-param name="inputTime" select="time"/>
																</xsl:call-template>
															</xsl:variable>
															<gml:timePosition>
																<xsl:variable name="castableAsDateTime">
																	<xsl:value-of
																		select="(substring($var_TimePos,5,1)='-') and (substring($var_TimePos,8,1)='-') and (substring($var_TimePos,11,1)='T') and (substring($var_TimePos,14,1)=':') and (substring($var_TimePos,17,1)=':')"
																	/>
																</xsl:variable>
																<xsl:choose>
																	<xsl:when test="string($castableAsDateTime)='true'">
																		<xsl:value-of select="$var_TimePos"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="indeterminatePosition">
																			<xsl:value-of select="xs:string('unknown')"/>
																		</xsl:attribute>
																	</xsl:otherwise>
																</xsl:choose>
															</gml:timePosition>
														</gml:TimeInstant>
													</xsl:otherwise>
												</xsl:choose>
												
											</gmd:extent>
										</gmd:EX_TemporalExtent>
									</gmd:temporalElement>
								</xsl:for-each>
								<!-- temporal extent, range of dates and time -->
								<!-- each rngdates has a rngdates/begdate begtime, and /enddate /endtime -->
								<xsl:for-each select="timeperd/timeinfo/rngdates">
									<xsl:variable name="var_rngdatesNode" select="."/>
									<gmd:temporalElement>
										<gmd:EX_TemporalExtent>
											<xsl:attribute name="id">
												<xsl:value-of select="fn:concat('DateRngEx.', generate-id())"/>
											</xsl:attribute>
											<gmd:extent>
												<gml:TimePeriod>
													<xsl:attribute name="gml:id">
														<xsl:value-of select="fn:concat('bndTimePeriod.',generate-id())"/>
													</xsl:attribute>
													<xsl:if test="fn:exists($var_metadataRoot/idinfo/timeperd/current)">
												<gml:description>
												<xsl:value-of select="xs:string($var_metadataRoot/idinfo/timeperd/current)"/>
												</gml:description>
												</xsl:if>
												<gml:beginPosition>
												<!-- content is ISO8610 (xs:date) string -->
												<xsl:choose>
												<xsl:when
												test="fn:contains(fn:lower-case(fn:string($var_rngdatesNode/begdate)), 'present') or fn:contains(fn:lower-case(fn:string($var_rngdatesNode/begdate)), 'now')">
												<xsl:attribute name="indeterminatePosition">
												<xsl:value-of select="string('now')"/>
												</xsl:attribute>
												</xsl:when>

												<xsl:otherwise>
												<xsl:variable name="var_TimePos3">
												<xsl:call-template name="usgin:TimePositionFormat">
												<xsl:with-param name="inputDate" select="begdate"/>
												<xsl:with-param name="inputTime" select="begtime"
												/>
												</xsl:call-template>
												</xsl:variable>
												<xsl:variable name="castableAsDateTime3">
												<xsl:value-of
												select="(substring($var_TimePos3,5,1)='-') and (substring($var_TimePos3,8,1)='-') and (substring($var_TimePos3,11,1)='T') and (substring($var_TimePos3,14,1)=':') and (substring($var_TimePos3,17,1)=':')"
												/>
												</xsl:variable>
												<xsl:choose>
												<xsl:when
												test="string($castableAsDateTime3)='true'">
												<xsl:value-of select="$var_TimePos3"/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:attribute name="indeterminatePosition">
												<xsl:value-of select="xs:string('unknown')"/>
												</xsl:attribute>
												</xsl:otherwise>
												</xsl:choose>
												</xsl:otherwise>
												</xsl:choose>
												</gml:beginPosition>
												<gml:endPosition>
												<!-- content is ISO8601 (xs:date) string -->
													<!-- content is ISO8610 (xs:date) string -->
													<xsl:choose>
														<xsl:when
															test="fn:contains(fn:lower-case(fn:string($var_rngdatesNode/enddate)), 'present') or fn:contains(fn:lower-case(fn:string($var_rngdatesNode/enddate)), 'now')">
															<xsl:attribute name="indeterminatePosition">
																<xsl:value-of select="string('now')"/>
															</xsl:attribute>
														</xsl:when>
														
														<xsl:otherwise>
															<xsl:variable name="var_TimePos4">
																<xsl:call-template name="usgin:TimePositionFormat">
																	<xsl:with-param name="inputDate" select="enddate"/>
																	<xsl:with-param name="inputTime" select="endtime"
																	/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:variable name="castableAsDateTime4">
																<xsl:value-of
																	select="(substring($var_TimePos4,5,1)='-') and (substring($var_TimePos4,8,1)='-') and (substring($var_TimePos4,11,1)='T') and (substring($var_TimePos4,14,1)=':') and (substring($var_TimePos4,17,1)=':')"
																/>
															</xsl:variable>
															<xsl:choose>
																<xsl:when
																	test="string($castableAsDateTime4)='true'">
																	<xsl:value-of select="$var_TimePos4"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:attribute name="indeterminatePosition">
																		<xsl:value-of select="xs:string('unknown')"/>
																	</xsl:attribute>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:otherwise>
													</xsl:choose>												</gml:endPosition>
												</gml:TimePeriod>
											</gmd:extent>
										</gmd:EX_TemporalExtent>
									</gmd:temporalElement>
								</xsl:for-each>
							</gmd:EX_Extent>
						</gmd:extent>
						<!-- supplemental information text blob... -->
						<xsl:for-each select="descript/supplinf">
							<gmd:supplementalInformation>
								<gco:CharacterString>
									<xsl:value-of select="xs:string(.)"/>
								</gco:CharacterString>
							</gmd:supplementalInformation>
						</xsl:for-each>
					</gmd:MD_DataIdentification>
				</gmd:identificationInfo>
			</xsl:for-each> 			<!-- end context is metadata/idinfo -->

			<!-- content information section -->
			<!-- replaced contentInfo with choose -->
			<xsl:if test="fn:exists($var_metadataRoot/eainfo/detailed)">
				<gmd:contentInfo>
					<gmd:MD_FeatureCatalogueDescription>
						<gmd:includedWithDataset>
							<gco:Boolean>
								<xsl:value-of select="fn:exists($var_metadataRoot/eainfo/detailed)"
								/>
							</gco:Boolean>
						</gmd:includedWithDataset>
						<xsl:for-each select="$var_metadataRoot/eainfo/detailed">
							<gmd:featureTypes>
								<gco:LocalName>
									<xsl:attribute name="codeSpace">
										<xsl:value-of
											select="fn:normalize-space(xs:string(enttyp/enttypl))"/>
									</xsl:attribute>
								</gco:LocalName>
							</gmd:featureTypes>
						</xsl:for-each>
						<gmd:featureCatalogueCitation>
							<!--<xsl:variable name="var_eainfoDetailedExists" as="xs:decimal" select="(if (fn:exists($var_metadataRoot/eainfo/detailed)) then xs:decimal(1) else xs:decimal(0))"/>-->
							<xsl:if test="fn:exists($var_metadataRoot/eainfo/detailed)">
								<xsl:attribute name="gco:nilReason">
									<xsl:value-of select="xs:string('unknown')"/>
								</xsl:attribute>
							</xsl:if>
							<xsl:variable name="var_eainfoEaoverLabel">
								<xsl:choose>
									<xsl:when
										test="fn:exists($var_metadataRoot/eainfo/overview/eaover)">
										<xsl:value-of
											select="string('Entity and Attribute Overview: ')"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="string('')"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:if test="fn:exists($var_eainfoEaoverLabel)">
								<xsl:variable name="var_eainfoEaoverText">
									<xsl:variable name="var_eainfoEaoverTextSeq">
										<xsl:for-each select="$var_metadataRoot/eainfo/overview">
											<xsl:value-of select="xs:string(eaover)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:if test="fn:exists($var_eainfoEaoverTextSeq)">
										<xsl:value-of
											select="fn:string-join($var_eainfoEaoverTextSeq, ' ')"/>
									</xsl:if>
								</xsl:variable>
								<xsl:for-each select="$var_eainfoEaoverText">
									<!-- xsl:variable name="var1074_cur_cond_result_exists"  select="."/ -->
									<xsl:variable name="var_eainfoEadetcitLabel">
										<xsl:choose>
											<xsl:when
												test="fn:exists($var_metadataRoot/eainfo/overview/eadetcit)">
												<xsl:value-of
												select="string('   Entity and Attribute Detail Citation: ')"
												/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="string('')"/>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:if test="fn:exists($var_eainfoEadetcitLabel)">
										<xsl:variable name="var_eainfoEadetcitText">
											<xsl:if
												test="fn:exists($var_metadataRoot/eainfo/overview/eadetcit)">
												<xsl:variable name="var1081_map_select_metadata">
												<xsl:for-each
												select="$var_metadataRoot/eainfo/overview/eadetcit">
												<xsl:value-of select="xs:string(.)"/>
												</xsl:for-each>
												</xsl:variable>
												<xsl:if
												test="fn:exists($var1081_map_select_metadata)">
												<xsl:value-of
												select="fn:string-join($var1081_map_select_metadata, ' ')"
												/>
												</xsl:if>
											</xsl:if>
										</xsl:variable>
										<gmd:CI_Citation>
											<gmd:title>
												<gco:CharacterString>
												<xsl:value-of
												select="'Entity and Attribute Information'"/>
												</gco:CharacterString>
											</gmd:title>
											<gmd:date>
												<xsl:attribute name="gco:nilReason">
												<xsl:value-of select="xs:string('unknown')"/>
												</xsl:attribute>
											</gmd:date>
											<gmd:otherCitationDetails>
												<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(fn:concat($var_eainfoEaoverLabel, $var_eainfoEaoverText, $var_eainfoEadetcitLabel, $var_eainfoEadetcitText))"
												/>
												</gco:CharacterString>
											</gmd:otherCitationDetails>
										</gmd:CI_Citation>
									</xsl:if>
								</xsl:for-each>
							</xsl:if>
						</gmd:featureCatalogueCitation>
					</gmd:MD_FeatureCatalogueDescription>
				</gmd:contentInfo>
			</xsl:if>
			<xsl:if test="fn:exists($var_metadataRoot/dataqual/cloud)">
				<gmd:contentInfo>
					<gmd:MD_ImageDescription>
						<!-- attributeDescription and contentType are mandatory for valid MD_ImageDescription -->
						<gmd:attributeDescription gco:nilReason="missing"/>
						<gmd:contentType>
							<gmd:MD_CoverageContentTypeCode
								codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_CoverageContentTypeCode"
								codeListValue="image"/>
						</gmd:contentType>
						<gmd:cloudCoverPercentage>
							<xsl:choose>
								<xsl:when
									test="fn:contains(fn:lower-case(xs:string($var_metadataRoot/dataqual/cloud)), 'unknown')">
									<xsl:attribute name="gco:nilReason">
										<xsl:value-of select="xs:string('unknown')"/>
									</xsl:attribute>
								</xsl:when>
								<xsl:when
									test="number($var_metadataRoot/dataqual/cloud[1])=number($var_metadataRoot/dataqual/cloud[1])">
									<gco:Real>
										<xsl:value-of
											select="xs:string($var_metadataRoot/dataqual/cloud[1])"
										/>
									</gco:Real>
								</xsl:when>
								<xsl:otherwise>
									<xsl:attribute name="gco:nilReason">
										<xsl:value-of select="xs:string('inapplicable')"/>
									</xsl:attribute>
								</xsl:otherwise>
							</xsl:choose>
						</gmd:cloudCoverPercentage>
					</gmd:MD_ImageDescription>
				</gmd:contentInfo>
			</xsl:if>

			<!-- ******************************************************************* -->
			<!-- each distribution (distinfo) has one distributor contact;  distinfo/digform in first distInfo get transferOptions links from MD_Distribution and distributorTransferOptions link (by href) from the distributor, and distributionFormat links from MD_Distribution as well as distributorFormatLinks from distributor.  Other distinfo elements are distributor/MD_Distributor elements with distributorTransferOptions and distributorFormat elements for each distinfo/digForm -->
			<xsl:choose>

				<xsl:when test="fn:exists($var_metadataRoot/distinfo)">
					<gmd:distributionInfo>
						<gmd:MD_Distribution>
							<!-- process distinfo[1] formats into distributionFormat -->
							<!-- process distributor 
					for-each distributor
						process formats (href for distinfo[1]) into distributorFormat
						process distributor
						process transferOptions (href for distinfo[1]) into distributorTransferOptions-->
							<!-- process distinfo[1] transfer options into MD_Distributon/transferOptions -->
							<!-- process citeinfo/onlink into DigitalTransferOptions with unknonwn distributor -->

							<!-- distribution format -->
							<xsl:for-each select="$var_metadataRoot/distinfo[1]/stdorder[1]/digform[1]">
								<gmd:distributionFormat>
									<xsl:call-template name="usgin:format">
										<xsl:with-param name="thedigform" select="."/>
										<xsl:with-param name="theFmtID" select="'firstIDformat'"/>
									</xsl:call-template>
								</gmd:distributionFormat>
							</xsl:for-each>
							<!-- handle each distributor, which will have its own distinfo element -->
							<xsl:for-each select="$var_metadataRoot/distinfo">
								<xsl:variable name="currentDistInfo" select="."/>
								<!-- each distinfo has one contact (distinfo/cntInfo) -->
								<!-- each csdgm distribution has a distribuotr, resource description, distribution liability,
							0..* standard order process, custom order process, techpreq, available time period.
							The formats and transferOptions for the first distributor are placed in distributionFormat and 
							transferOptions for USGIN, and repeated (by href) in the distributorFormat and 
							distributorTransferOptions-->
								<!-- distributor information -->
								<gmd:distributor>
									<gmd:MD_Distributor>
										<gmd:distributorContact>
											<!-- csdgm allows exactly one cntinfo per distrib -->
											<gmd:CI_ResponsibleParty>
												<xsl:call-template name="usgin:contactName">
												<xsl:with-param name="the-cntinfo"
												select="distrib/cntinfo"/>
												</xsl:call-template>
												<gmd:contactInfo>
												<xsl:call-template name="usgin:contactHandler">
												<xsl:with-param name="the-cntinfo"
												select="distrib/cntinfo"/>
												</xsl:call-template>
												</gmd:contactInfo>
												<gmd:role>
												<gmd:CI_RoleCode
												codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode"
												codeListValue="distributor" codeSpace="005">
												<xsl:value-of select="xs:string('distributor')"/>
												</gmd:CI_RoleCode>
												</gmd:role>
											</gmd:CI_ResponsibleParty>
										</gmd:distributorContact>
										<!-- distribution ordering process information; context is distinfo -->
										<!-- avaialble  -->
										<xsl:variable name="var_availabl">
											<xsl:choose>
												<xsl:when test="fn:exists(availabl/timeinfo/sngdate)">
													<!-- csdgm allow general timeinfo: a sngdate, daterange or multi date ISO plannedAvailableDateTime is a single DateTime only.-->
														<xsl:call-template name="usgin:TimePositionFormat">
															<xsl:with-param name="inputDate" select="availabl/timeinfo/sngdate/caldate"/>
															<xsl:with-param name="inputTime" select="availabl/timeinfo/sngdate/time"/>														</xsl:call-template>
													
												</xsl:when>
												<xsl:when test="fn:exists(availabl/timeinfo/rngdates)">
													<!-- put in the begin date -->
													<xsl:call-template name="usgin:TimePositionFormat">
														<xsl:with-param name="inputDate"
															select="availabl/timeinfo/rngdates/begdate"/>
														<xsl:with-param name="inputTime"
															select="availabl/timeinfo/rngdates/begtime"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:when test="fn:exists(availabl/timeinfo/mdattim)">
													<xsl:call-template name="usgin:TimePositionFormat">
														<xsl:with-param name="inputDate"
															select="availabl/timeinfo/mdattim/sngdate[1]/caldate"/>
														<xsl:with-param name="inputTime"
															select="availabl/timeinfo/mdattim/sngdate[1]/time"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>
														<xsl:value-of select="xs:string('nilError')"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:for-each select="stdorder">
											<gmd:distributionOrderProcess>
												<gmd:MD_StandardOrderProcess>
													<xsl:if test="fn:exists(fees)">
														<gmd:fees>
															<gco:CharacterString>
																<xsl:value-of select="fn:normalize-space(xs:string(fees))"/>
															</gco:CharacterString>
														</gmd:fees>
													</xsl:if>
													<xsl:if test="fn:exists($var_availabl) and not(contains($var_availabl,'nilError'))">
														<gmd:plannedAvailableDateTime>
														<xsl:choose>
															<xsl:when test="contains($var_availabl,'nil')">
																<xsl:attribute name="gco:nilReason">
																	<xsl:value-of select="substring-after($var_availabl,'nil')"/>
																</xsl:attribute>
															</xsl:when>
															<xsl:otherwise>
																<gco:DateTime>
																	<xsl:value-of select="$var_availabl"/>
																</gco:DateTime>
															</xsl:otherwise>
														</xsl:choose>
														</gmd:plannedAvailableDateTime>
													</xsl:if>
			<!--	Test to see if there are ordering instructions in the source metadata distribution section; 
								context is distinfo/stdorder-->
												<xsl:if
												test="fn:exists($currentDistInfo/custom) or fn:exists(nondig) or fn:exists(digform/ordering) or fn:exists(digform/digtopt/onlinopt)">
												<gmd:orderingInstructions>
			<!-- csdgm allows accessinstructions for each distinct online option, which might all be inside one stdorder; also might have 
										ordering for the stdorder element, or custom instructions associated with the distributor. 
										put dial-uup information in the text as well.-->
												<gco:CharacterString>
												<xsl:if test="fn:exists($currentDistInfo/custom)">
												<xsl:variable name="var-cust-dist-name">
												<xsl:choose>
												<xsl:when
												test="fn:exists($currentDistInfo/cntinfo/cntperp/cntper)">
												<xsl:value-of
												select="concat(xs:string($currentDistInfo/cntinfo/cntperp/cntper), ' custom')"
												/>
												</xsl:when>
												<xsl:when
												test="fn:exists($currentDistInfo/cntinfo/cntorgp/cntorg)">
												<xsl:value-of
												select="concat(xs:string($currentDistInfo/cntinfo/cntorgp/cntorg),' custom')"
												/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of
												select="string('Custom distributor info')"/>
												</xsl:otherwise>
												</xsl:choose>
												</xsl:variable>
												<xsl:value-of
												select="concat($var-cust-dist-name,': ')"/>
												<xsl:value-of
												select="concat(fn:normalize-space(xs:string($currentDistInfo/custom)),'. ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(nondig)">
												<xsl:value-of
												select="string('Non-Digital distribution: ')"/>
												<xsl:value-of
												select="concat(normalize-space(xs:string(nondig)),'. ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(digform/ordering)">
												<xsl:value-of
												select="concat('Ordering Instructions: ', fn:normalize-space(xs:string(digform/ordering)), '. ')"
												/>
												</xsl:if>

												<xsl:for-each
												select="digform/digtopt/onlinopt/computer">
												<xsl:if
												test="fn:exists(accinstr) or fn:exists(dialinst/dialtel)">
												<xsl:variable name="instrLabel">
												<xsl:choose>
												<xsl:when test="fn:exists(networka)">
												<xsl:value-of
												select="fn:normalize-space(xs:string(computer/networka/networkr[1]))"
												/>
												</xsl:when>
												<xsl:when test="fn:exists(dialinst/dialtel)">
												<xsl:value-of
												select="fn:normalize-space(xs:string(computer/networka/dialtel[1]))"
												/>
												</xsl:when>
												<xsl:otherwise>
												<xsl:value-of select="'noName'"/>
												</xsl:otherwise>
												</xsl:choose>
												</xsl:variable>
												<xsl:value-of
												select="concat('Access instructions for ', $instrLabel,': ')"/>
												<xsl:value-of
												select="concat(fn:normalize-space(xs:string(accinstr)),'. ')"/>
												<xsl:if test="fn:exists(dialinst)">
												<xsl:if test="fn:exists(dialinst/lowbps)">
												<xsl:value-of
												select="concat('Lowest BPS:',string(dialinst/lowbps),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/highbps)">
												<xsl:value-of
												select="concat('Highest BPS:',string(dialinst/highbps),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/numdata)">
												<xsl:value-of
												select="concat('Number DataBits:',string(dialinst/numdata),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/numstop)">
												<xsl:value-of
												select="concat('Number StopBits:',string(dialinst/numstop),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/parity)">
												<xsl:value-of
												select="concat('Parity:',string(dialinst/parity),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/compress)">
												<xsl:value-of
												select="concat('Compression Support:',string(dialinst/compress),'; ')"
												/>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/dialtel)">
												<xsl:for-each select="dialinst/dialtel">
												<xsl:value-of
												select="concat('Dialup Telephone:',string(.),'; ')"
												/>
												</xsl:for-each>
												</xsl:if>
												<xsl:if test="fn:exists(dialinst/dialfile)">
												<xsl:for-each select="dialinst/dialfile">
												<xsl:value-of
												select="concat('Dialup File Name:',string(.),'; ')"
												/>
												</xsl:for-each>
												</xsl:if>
												</xsl:if>
												<!-- put dial-up information in the text blob... -->
												</xsl:if>
												<xsl:if test="fn:exists(oncomp)">
												<xsl:value-of
												select="concat('Online Computer and Operating System: ', fn:normalize-space(xs:string(oncomp)), '. ')"
												/>
												</xsl:if>
												</xsl:for-each>

												</gco:CharacterString>
												</gmd:orderingInstructions>
												</xsl:if>
												<xsl:for-each select="turnarnd">
												<gmd:turnaround>
												<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(.))"/>
												</gco:CharacterString>
												</gmd:turnaround>
												</xsl:for-each>
												</gmd:MD_StandardOrderProcess>
											</gmd:distributionOrderProcess>
										</xsl:for-each>
										<xsl:if test="count($var_metadataRoot/distinfo)>1">
											<!-- distributorFormat -->
											<xsl:for-each select="$currentDistInfo/stdorder/digform">
												<xsl:choose>
												<xsl:when
												test="$var_metadataRoot/distinfo[1]/stdorder/digform[1]/digtinfo/formname =digtinfo/formname">
												<gmd:distributorFormat>
												<xsl:attribute name="xlink:href">
												<xsl:value-of select="concat('#','firstIDformat')"
												/>
												</xsl:attribute>
												</gmd:distributorFormat>
												</xsl:when>
												<xsl:otherwise>
												<gmd:distributorFormat>
												<xsl:call-template name="usgin:format">
												<xsl:with-param name="thedigform" select="."/>
												</xsl:call-template>
												</gmd:distributorFormat>
												</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>

											<!-- distributorTransferOptions -->
											<xsl:for-each select="$currentDistInfo/stdorder/digform">
												<xsl:choose>
												<xsl:when
												test="$var_metadataRoot/distinfo[1]/stdorder/digform[1]/digtopt[1]/networkr[1] = digtopt/networkr[1]">
												<gmd:distributorTransferOptions>
												<xsl:attribute name="xlink:href">
												<xsl:value-of select="concat('#','firstOptionID')"
												/>
												</xsl:attribute>
												</gmd:distributorTransferOptions>
												</xsl:when>
												<xsl:otherwise>
												<gmd:distributorTransferOptions>
												<xsl:call-template name="usgin:digTransferOption">
												<xsl:with-param name="thedigform" select="."/>
												</xsl:call-template>
												</gmd:distributorTransferOptions>
												</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>
										</xsl:if>
									</gmd:MD_Distributor>
								</gmd:distributor>
							</xsl:for-each>

							<!-- transfer options for first distinfo//digform only; others are transformed as distributorTransferOptions -->
							<xsl:choose>
								<xsl:when
									test="fn:exists($var_metadataRoot/distinfo[1]/stdorder/digform[1])">
									<gmd:transferOptions>
										<!-- process for the first distinfo -->
										<xsl:call-template name="usgin:digTransferOption">
											<xsl:with-param name="thedigform"
												select="$var_metadataRoot/distinfo[1]/stdorder/digform[1]"/>
											<xsl:with-param name="theOptionID"
												select="'firstOptionID'"/>
										</xsl:call-template>
									</gmd:transferOptions>
								</xsl:when>
								<xsl:otherwise>
									<gmd:transferOptions>
										<xsl:attribute name="gco:nilReason">
											<xsl:value-of select="xs:string('missing')"/>
										</xsl:attribute>
									</gmd:transferOptions>
								</xsl:otherwise>
							</xsl:choose>

							<!-- CHECK IF there are any resource links in the citation and add those. -->
							<xsl:if
								test="fn:exists($var_metadataRoot/idinfo/citation/citeinfo/onlink[contains(.,'//')])">
								<gmd:transferOptions>
									<gmd:MD_DigitalTransferOptions>
										<xsl:for-each
											select="$var_metadataRoot/idinfo/citation/citeinfo/onlink[contains(.,'//')]">
											<gmd:onLine>
												<gmd:CI_OnlineResource>
												<gmd:linkage>
												<gmd:URL>
												<xsl:value-of
												select="xs:string(xs:anyURI(fn:normalize-space(.)))"
												/>
												</gmd:URL>
												</gmd:linkage>
												<gmd:protocol>
												<gco:CharacterString>http</gco:CharacterString>
												</gmd:protocol>
												<gmd:name>
												<gco:CharacterString>
												<xsl:value-of
												select="$var_metadataRoot/idinfo/citation/citeinfo/title"
												/>
												</gco:CharacterString>
												</gmd:name>
												<gmd:description>
												<gco:CharacterString>
												<xsl:value-of
												select="'Online linkage from csdgm citation; there is no contact information for the distributor'"
												/>
												</gco:CharacterString>
												</gmd:description>
												</gmd:CI_OnlineResource>
											</gmd:onLine>
										</xsl:for-each>
									</gmd:MD_DigitalTransferOptions>
								</gmd:transferOptions>
							</xsl:if>
						</gmd:MD_Distribution>
					</gmd:distributionInfo>
				</xsl:when>
				<xsl:otherwise>
					<gmd:distributionInfo>
						<xsl:attribute name="gco:nilReason">
							<xsl:value-of select="'missing'"/>
						</xsl:attribute>
					</gmd:distributionInfo>
				</xsl:otherwise>

			</xsl:choose>

			<!-- ************************************************************************** -->
			<!-- data quality section; csdgm allows one dataqual element -->
			<!-- csdgm may have {attribute accuracy or Postitional Accuracy} and lineage -->
			<xsl:for-each select="$var_metadataRoot/dataqual">
				<gmd:dataQualityInfo>
					<gmd:DQ_DataQuality>
						<!-- each ISO data quality is characterized by a different scope; 
		 	csdgm does not have concept of a quality scope, so there should only
			be one gmd:dataQualityInfo instance in the transformed metadata-->
						<gmd:scope>
							<gmd:DQ_Scope>
								<gmd:level>
									<gmd:MD_ScopeCode codeListValue="dataset"
										codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ScopeCode"
									/>
								</gmd:level>
							</gmd:DQ_Scope>
						</gmd:scope>
						<!-- position accuracy reports -->
						<!--ISO does not distinguish horizontal vs. vertical position accuracy -->
						<xsl:for-each select="posacc/horizpa">
							<gmd:report>
								<gmd:DQ_AbsoluteExternalPositionalAccuracy>
									<gmd:nameOfMeasure>
										<gco:CharacterString>
											<xsl:value-of select="'Horizontal Positional Accuracy'"
											/>
										</gco:CharacterString>
									</gmd:nameOfMeasure>
									<gmd:measureDescription>
										<gco:CharacterString>
											<xsl:variable name="DQMeasureDesc">
												<xsl:value-of
												select="xs:integer(fn:count(/metadata/dataqual/posacc/horizpa/qhorizpa))"
												/>
											</xsl:variable>
											<xsl:for-each
												select="/metadata/dataqual/posacc/horizpa/qhorizpa">
												<xsl:value-of
												select="fn:normalize-space(xs:string(horizpae))"/>
												<xsl:if test="($DQMeasureDesc>1)">
												<xsl:value-of select="xs:string(' ')"/>
												</xsl:if>
											</xsl:for-each>
										</gco:CharacterString>
									</gmd:measureDescription>
									<gmd:evaluationMethodDescription>
										<gco:CharacterString>
											<xsl:value-of
												select="fn:normalize-space(xs:string(horizpar))"/>
										</gco:CharacterString>
									</gmd:evaluationMethodDescription>
									<gmd:result>
										<gmd:DQ_QuantitativeResult>
											<gmd:valueUnit gco:nilReason="missing"/>
											<gmd:value>
												<gco:Record>
												<xsl:variable name="DQvalueCount">
												<xsl:value-of
												select="xs:integer(fn:count(/metadata/dataqual/posacc/horizpa/qhorizpa))"
												/>
												</xsl:variable>
												<xsl:for-each
												select="/metadata/dataqual/posacc/horizpa/qhorizpa">
												<xsl:value-of
												select="fn:normalize-space(xs:string(horizpav))"/>
												<xsl:if test="($DQvalueCount>1)">
												<xsl:value-of select="xs:string(' ')"/>
												</xsl:if>
												</xsl:for-each>
												</gco:Record>
											</gmd:value>
										</gmd:DQ_QuantitativeResult>
									</gmd:result>
								</gmd:DQ_AbsoluteExternalPositionalAccuracy>
							</gmd:report>
						</xsl:for-each>
						<xsl:for-each select="posacc/vertacc">
							<gmd:report>
								<gmd:DQ_AbsoluteExternalPositionalAccuracy>
									<gmd:nameOfMeasure>
										<gco:CharacterString>
											<xsl:value-of select="'Vertical Positional Accuracy'"/>
										</gco:CharacterString>
									</gmd:nameOfMeasure>
									<gmd:measureDescription>
										<gco:CharacterString>
											<xsl:variable name="DQvertAccExplan">
												<xsl:value-of
												select="xs:integer(fn:count(/metadata/dataqual/posacc/vertacc/qvertpa))"
												/>
											</xsl:variable>
											<xsl:for-each
												select="/metadata/dataqual/posacc/vertacc/qvertpa">
												<xsl:value-of
												select="fn:normalize-space(xs:string(vertacce))"/>
												<xsl:if test="($DQvertAccExplan>1)">
												<xsl:value-of select="xs:string(' ')"/>
												</xsl:if>
											</xsl:for-each>
										</gco:CharacterString>
									</gmd:measureDescription>
									<gmd:evaluationMethodDescription>
										<gco:CharacterString>
											<xsl:value-of
												select="fn:normalize-space(xs:string(vertaccr))"/>
										</gco:CharacterString>
									</gmd:evaluationMethodDescription>
									<gmd:result>
										<gmd:DQ_QuantitativeResult>
											<gmd:valueUnit gco:nilReason="missing"/>
											<gmd:value>
												<gco:Record>
												<xsl:variable name="DQvertAccVal">
												<xsl:value-of
												select="xs:integer(fn:count(/metadata/dataqual/posacc/vertacc/qvertpa))"
												/>
												</xsl:variable>
												<xsl:for-each
												select="/metadata/dataqual/posacc/vertacc/qvertpa">
												<xsl:value-of
												select="fn:normalize-space(xs:string(vertaccv))"/>
												<xsl:if test="($DQvertAccVal>1)">
												<xsl:value-of select="xs:string(' ')"/>
												</xsl:if>
												</xsl:for-each>
												</gco:Record>
											</gmd:value>
										</gmd:DQ_QuantitativeResult>
									</gmd:result>
								</gmd:DQ_AbsoluteExternalPositionalAccuracy>
							</gmd:report>
						</xsl:for-each>
						<!-- completeness report -->
						<xsl:if test="fn:exists(complete)">
							<gmd:report>
								<gmd:DQ_CompletenessOmission>
									<gmd:nameOfMeasure>
										<gco:CharacterString>
											<xsl:value-of select="'CSDGM Completeness report: '"/>
										</gco:CharacterString>
									</gmd:nameOfMeasure>
									<gmd:evaluationMethodDescription>
										<gco:CharacterString>
											<xsl:value-of
												select="fn:normalize-space(xs:string(complete))"/>
										</gco:CharacterString>
									</gmd:evaluationMethodDescription>
									<gmd:result>
										<xsl:attribute name="gco:nilReason">
											<xsl:value-of select="'missing'"/>
										</xsl:attribute>
									</gmd:result>
								</gmd:DQ_CompletenessOmission>
							</gmd:report>
						</xsl:if>
						<!-- conceptual consistency report -->
						<xsl:if test="fn:exists(logic)">
							<gmd:report>
								<gmd:DQ_ConceptualConsistency>
									<gmd:nameOfMeasure>
										<gco:CharacterString>
											<xsl:value-of
												select="'CSDGM Logical Consistency Report: '"/>
										</gco:CharacterString>
									</gmd:nameOfMeasure>
									<gmd:measureDescription>
										<gco:CharacterString>
											<xsl:value-of
												select="fn:normalize-space(xs:string(logic))"/>
										</gco:CharacterString>
									</gmd:measureDescription>
									<gmd:result>
										<xsl:attribute name="gco:nilReason">
											<xsl:value-of select="xs:string('missing')"/>
										</xsl:attribute>
									</gmd:result>
								</gmd:DQ_ConceptualConsistency>
							</gmd:report>
						</xsl:if>
						<!-- attribute accuracy information -->
						<xsl:for-each select="attracc">
							<xsl:variable name="var_attributeAccuracyNode" select="."/>
							<gmd:report>
								<gmd:DQ_QuantitativeAttributeAccuracy>
									<gmd:nameOfMeasure>
										<gco:CharacterString>
											<xsl:value-of
												select="'Quantitative Attribute Accuracy Assessment'"
											/>
										</gco:CharacterString>
									</gmd:nameOfMeasure>
									<gmd:measureDescription>
										<gco:CharacterString>
											<xsl:variable name="var_count_qattracc1">
												<xsl:value-of select="count(qattracc)"/>
											</xsl:variable>
											<xsl:for-each select="qattracc">
												<xsl:value-of
												select="fn:normalize-space(xs:string(attracce))"/>
												<xsl:if test="$var_count_qattracc1 &gt; 1">
												<xsl:value-of select="';  '"/>
												</xsl:if>
											</xsl:for-each>
										</gco:CharacterString>
									</gmd:measureDescription>
									<xsl:if test="fn:exists(attraccr)">
										<gmd:evaluationMethodDescription>
											<gco:CharacterString>
												<xsl:value-of
												select="fn:normalize-space(xs:string(attraccr))"/>
											</gco:CharacterString>
										</gmd:evaluationMethodDescription>
									</xsl:if>
									<gmd:result>
										<gmd:DQ_QuantitativeResult>
											<gmd:valueUnit gco:nilReason="inapplicable"/>
											<gmd:value>
												<gco:Record>
												<xsl:variable name="var_count_qattracc2">
												<xsl:value-of select="count(qattracc)"/>
												</xsl:variable>
												<xsl:for-each select="qattracc">
												<xsl:value-of
												select="fn:normalize-space(xs:string(attraccv))"/>
												<xsl:if test="$var_count_qattracc2 &gt; 1">
												<xsl:value-of select="';  '"/>
												</xsl:if>
												</xsl:for-each>
												</gco:Record>
											</gmd:value>
										</gmd:DQ_QuantitativeResult>
									</gmd:result>
								</gmd:DQ_QuantitativeAttributeAccuracy>
							</gmd:report>
						</xsl:for-each>
						<!-- lineage information -->
						<!-- csdgm xml puts a list of sources first, with an abbreviation for each one 
				that serves	to link process step input and output sources with the citations. -->
						<xsl:if test="fn:exists(lineage)">
							<gmd:lineage>
								<gmd:LI_Lineage>
									<gmd:statement>
										<gco:CharacterString>missing</gco:CharacterString>
									</gmd:statement>
									<xsl:for-each select="lineage/procstep">
										<xsl:variable name="var_lineageProcessingStepNode" select="."/>
										<gmd:processStep>
											<gmd:LI_ProcessStep>
												<gmd:description>
													<gco:CharacterString>
														<xsl:value-of select="xs:string(procdesc)"/>
													</gco:CharacterString>
												</gmd:description>
												<!-- process step date and time -->
												<gmd:dateTime>
													<xsl:variable name="var_formatProcdate">
														<xsl:call-template name="usgin:TimePositionFormat">
															<xsl:with-param name="inputDate" select="procdate"/>
															<xsl:with-param name="inputTime" select="proctime"/>
														</xsl:call-template>
													</xsl:variable>
													<xsl:choose>
														
														<xsl:when test="starts-with($var_formatProcdate,'nil')">
															<xsl:attribute name="gco:nilReason">
																<xsl:value-of select="'unknown'"/>
															</xsl:attribute>
														</xsl:when>
														<xsl:otherwise>
															<gco:DateTime>
																<xsl:value-of select="string($var_formatProcdate)"/>
															</gco:DateTime>
														</xsl:otherwise>
													</xsl:choose>
												</gmd:dateTime>
												<xsl:for-each select="proccont">
													<gmd:processor>
														<gmd:CI_ResponsibleParty>
															<xsl:call-template name="usgin:contactName">
																<xsl:with-param name="the-cntinfo" select="cntinfo"/>
															</xsl:call-template>
															<gmd:contactInfo>
																<xsl:call-template name="usgin:contactHandler">
																	<xsl:with-param name="the-cntinfo" select="cntinfo"/>
																</xsl:call-template>
															</gmd:contactInfo>
															<gmd:role>
																<gmd:CI_RoleCode codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode" codeListValue="processor" codeSpace="009">
																	<xsl:value-of select="xs:string('processor')"/>
																</gmd:CI_RoleCode>
															</gmd:role>
														</gmd:CI_ResponsibleParty>
													</gmd:processor>
												</xsl:for-each>
												<!-- get sources -->
												<xsl:for-each select="srcprod">
													<gmd:source>
														<xsl:attribute name="xlink:href">
															<xsl:value-of select="concat('#',normalize-space(srcprod))"/>
														</xsl:attribute>
													</gmd:source>
												</xsl:for-each>
											</gmd:LI_ProcessStep>
										</gmd:processStep>
									</xsl:for-each>
									<!-- csdgm process steps reference a sourceCitations from a citation section -->
									<xsl:for-each select="lineage/srcinfo">
										<xsl:variable name="var_lineageSourceInfoNode" select="."/>
										<gmd:source>
											<gmd:LI_Source>
												<xsl:if test="fn:exists(srccitea)">
													<xsl:attribute name="id">
														<xsl:value-of select="xs:string(srccitea)"/>
													</xsl:attribute>
												</xsl:if>
												<xsl:if
													test="fn:exists(strcontr) or fn:exists(typesrc)">
													<gmd:description>
														<gco:CharacterString>
															<xsl:if test="fn:exists(strcontr)">
																<xsl:value-of
																	select="fn:concat('Source Contribution: ', xs:string(srccontr), ' ')"
																/>
															</xsl:if>
															<xsl:if test="fn:exists(typesrc)">
																<xsl:value-of
																	select="fn:concat('Type of Source Media: ',  xs:string(typesrc))"
																/>
															</xsl:if>
														</gco:CharacterString>
													</gmd:description>
												</xsl:if>
												<xsl:if
													test="fn:exists(srcscale) and ((fn:lower-case(fn:string(srcscale)) = 'unknown') or (number(srcscale)=number(srcscale)))">
													<gmd:scaleDenominator>
														<gmd:MD_RepresentativeFraction>
															<gmd:denominator>
																<xsl:choose>
																	<xsl:when
																		test="(fn:lower-case(fn:string(srcscale)) = 'unknown')">
																		<xsl:attribute name="gco:nilReason">
																			<xsl:value-of select="xs:string('unknown')"/>
																		</xsl:attribute>
																	</xsl:when>
																	<xsl:when test="number(srcscale)=number(srcscale)">
																		<gco:Integer>
																			<xsl:value-of
																				select="xs:string(xs:integer(srcscale))"/>
																		</gco:Integer>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="gco:nilReason">
																			<!-- use inapplicable to indicate the srcscale value is not interpretable -->
																			<xsl:value-of select="xs:string('inapplicable')"/>
																		</xsl:attribute>
																	</xsl:otherwise>
																</xsl:choose>
															</gmd:denominator>
														</gmd:MD_RepresentativeFraction>
													</gmd:scaleDenominator>
												</xsl:if>
												<xsl:for-each select="srccite/citeinfo">
												<gmd:sourceCitation>
													<xsl:call-template name="usgin:citinfoHandler">
														<xsl:with-param name="theciteinfo">
															<xsl:value-of select="."/>
														</xsl:with-param>
													</xsl:call-template>
												</gmd:sourceCitation>
												</xsl:for-each>
												<xsl:if test="fn:exists(srctime/timeinfo)">
													<gmd:sourceExtent>
														<gmd:EX_Extent>
															<!-- temporal extent, single date -->
															<xsl:for-each select="srctime/timeinfo/sngdate">
																<xsl:variable name="var_extentSingleDate1" select="."/>
																<gmd:temporalElement>
																	<gmd:EX_TemporalExtent>
																		<xsl:attribute name="id">
																			<xsl:value-of
																				select="fn:concat('TempEx.', generate-id())"/>
																		</xsl:attribute>
																		<gmd:extent>												
																			<xsl:choose>
																				<xsl:when
																					test="fn:contains(fn:lower-case(fn:string(caldate)), 'unknown') or fn:contains(fn:lower-case(fn:string(caldate)), 'unpublished')">
																					<xsl:attribute name="gco:nilReason">
																						<xsl:value-of select="fn:lower-case(fn:normalize-space(fn:string(caldate)))"/>
																					</xsl:attribute>
																				</xsl:when>
																				<xsl:otherwise>
																					<gml:TimeInstant>
																						<xsl:attribute name="gml:id">
																							<xsl:value-of select="fn:concat('TInst.',generate-id())"/>
																						</xsl:attribute>
																						<xsl:variable name="var_TimePos5">
																							<xsl:call-template name="usgin:TimePositionFormat">
																								<xsl:with-param name="inputDate" select="caldate"/>
																								<xsl:with-param name="inputTime" select="time"/>
																							</xsl:call-template>
																						</xsl:variable>
																						<gml:timePosition>
																							<xsl:variable name="castableAsDateTime5">
																								<xsl:value-of
																									select="(substring($var_TimePos5,5,1)='-') and (substring($var_TimePos5,8,1)='-') and (substring($var_TimePos5,11,1)='T') and (substring($var_TimePos5,14,1)=':') and (substring($var_TimePos5,17,1)=':')"/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($castableAsDateTime5)='true'">
																									<xsl:value-of select="$var_TimePos5"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:attribute name="indeterminatePosition">
																										<xsl:value-of select="xs:string('unknown')"/>
																									</xsl:attribute>
																								</xsl:otherwise>
																							</xsl:choose>
																						</gml:timePosition>
																					</gml:TimeInstant>
																				</xsl:otherwise>
																			</xsl:choose>
																		</gmd:extent>
																	</gmd:EX_TemporalExtent>
																</gmd:temporalElement>
															</xsl:for-each>
															<!-- temporal extent, multiple individual dates and times. 
																guess the idea is there might be multple mdattim/sngdate elements?-->
															<xsl:for-each select="srctime/timeinfo/mdattim/sngdate">
																<!-- iterate over sngdate elements in mdattim -->
																<!--	<xsl:variable name="var_mdattmdate" select="."/>-->
																<gmd:temporalElement>
																	<gmd:EX_TemporalExtent>
																		<xsl:attribute name="id">
																			<xsl:value-of
																				select="fn:concat('TimePerEx.', generate-id())"
																			/>
																		</xsl:attribute>
																		<gmd:extent>
																			<xsl:choose>
																				<xsl:when
																					test="fn:contains(fn:lower-case(fn:string(caldate)), 'unknown') or fn:contains(fn:lower-case(fn:string(caldate)), 'unpublished')">
																					<xsl:attribute name="gco:nilReason">
																						<xsl:value-of select="fn:lower-case(fn:normalize-space(fn:string(caldate)))"/>
																					</xsl:attribute>
																				</xsl:when>
																				<xsl:otherwise>
																					<gml:TimeInstant>
																						<xsl:attribute name="gml:id">
																							<xsl:value-of select="fn:concat('TInst.',generate-id())"/>
																						</xsl:attribute>
																						<!-- now process the dates -->
																						<!--						<xsl:variable name="var_DateTemp"> -->
																						<xsl:variable name="var_TimePos6">
																							<xsl:call-template name="usgin:TimePositionFormat">
																								<xsl:with-param name="inputDate" select="caldate"/>
																								<xsl:with-param name="inputTime" select="time"/>
																							</xsl:call-template>
																						</xsl:variable>
																						<gml:timePosition>
																							<xsl:variable name="castableAsDateTime6">
																								<xsl:value-of
																									select="(substring($var_TimePos6,5,1)='-') and (substring($var_TimePos6,8,1)='-') and (substring($var_TimePos6,11,1)='T') and (substring($var_TimePos6,14,1)=':') and (substring($var_TimePos6,17,1)=':')"
																								/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($castableAsDateTime6)='true'">
																									<xsl:value-of select="$var_TimePos6"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:attribute name="indeterminatePosition">
																										<xsl:value-of select="xs:string('unknown')"/>
																									</xsl:attribute>
																								</xsl:otherwise>
																							</xsl:choose>
																						</gml:timePosition>
																						
																					</gml:TimeInstant>
																				</xsl:otherwise>
																			</xsl:choose>
																		</gmd:extent>
																	</gmd:EX_TemporalExtent>
																</gmd:temporalElement>
															</xsl:for-each>
															<!-- temporal extent, range of dates and time -->
															<!-- each rngdates has a rngdates/begdate begtime, and /enddate /endtime -->
															<xsl:for-each select="srctime/timeinfo/rngdates">
																<xsl:variable name="var_rngdatesNode" select="."/>
																<gmd:temporalElement>
																	<gmd:EX_TemporalExtent>
																		<xsl:attribute name="id">
																			<xsl:value-of select="fn:concat('DateRngEx.', generate-id())"/>
																		</xsl:attribute>
																		<gmd:extent>
																			<gml:TimePeriod>
																				<xsl:attribute name="gml:id">
																					<xsl:value-of select="fn:concat('bndTimePeriod.',generate-id())"/>
																				</xsl:attribute>
																				<gml:beginPosition>
																					<!-- content is ISO8610 (xs:date) string -->
																					<xsl:choose>
																						<xsl:when
																							test="fn:contains(fn:lower-case(fn:string($var_rngdatesNode/begdate)), 'present') or fn:contains(fn:lower-case(fn:string($var_rngdatesNode/begdate)), 'now')">
																							<xsl:attribute name="indeterminatePosition">
																								<xsl:value-of select="string('now')"/>
																							</xsl:attribute>
																						</xsl:when>
																						
																						<xsl:otherwise>
																							<xsl:variable name="var_TimePos7">
																								<xsl:call-template name="usgin:TimePositionFormat">
																									<xsl:with-param name="inputDate" select="begdate"/>
																									<xsl:with-param name="inputTime" select="begtime"
																									/>
																								</xsl:call-template>
																							</xsl:variable>
																							<xsl:variable name="castableAsDateTime7">
																								<xsl:value-of
																									select="(substring($var_TimePos7,5,1)='-') and (substring($var_TimePos7,8,1)='-') and (substring($var_TimePos7,11,1)='T') and (substring($var_TimePos7,14,1)=':') and (substring($var_TimePos7,17,1)=':')"
																								/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when
																									test="string($castableAsDateTime7)='true'">
																									<xsl:value-of select="$var_TimePos7"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:attribute name="indeterminatePosition">
																										<xsl:value-of select="xs:string('unknown')"/>
																									</xsl:attribute>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:otherwise>
																					</xsl:choose>
																				</gml:beginPosition>
																				<gml:endPosition>
																					<!-- content is ISO8601 (xs:date) string -->
																					<xsl:choose>
																						<xsl:when
																							test="fn:contains(fn:lower-case(fn:string($var_rngdatesNode/enddate)), 'present') or fn:contains(fn:lower-case(fn:string($var_rngdatesNode/enddate)), 'now')">
																							<xsl:attribute name="indeterminatePosition">
																								<xsl:value-of select="string('now')"/>
																							</xsl:attribute>
																						</xsl:when>
																						
																						<xsl:otherwise>
																							<xsl:variable name="var_TimePos8">
																								<xsl:call-template name="usgin:TimePositionFormat">
																									<xsl:with-param name="inputDate" select="enddate"/>
																									<xsl:with-param name="inputTime" select="endtime"
																									/>
																								</xsl:call-template>
																							</xsl:variable>
																							<xsl:variable name="castableAsDateTime8">
																								<xsl:value-of
																									select="(substring($var_TimePos8,5,1)='-') and (substring($var_TimePos8,8,1)='-') and (substring($var_TimePos8,11,1)='T') and (substring($var_TimePos8,14,1)=':') and (substring($var_TimePos8,17,1)=':')"
																								/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when
																									test="string($castableAsDateTime8)='true'">
																									<xsl:value-of select="$var_TimePos8"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:attribute name="indeterminatePosition">
																										<xsl:value-of select="xs:string('unknown')"/>
																									</xsl:attribute>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:otherwise>
																					</xsl:choose>												</gml:endPosition>
																			</gml:TimePeriod>
																		</gmd:extent>
																	</gmd:EX_TemporalExtent>
																</gmd:temporalElement>
															</xsl:for-each>
														</gmd:EX_Extent>
													</gmd:sourceExtent>
												</xsl:if>
											</gmd:LI_Source>
										</gmd:source>
									</xsl:for-each>
								</gmd:LI_Lineage>
							</gmd:lineage>
						</xsl:if>
					</gmd:DQ_DataQuality>
				</gmd:dataQualityInfo>
			</xsl:for-each>

			<!-- metadata constraints -->
			<xsl:if
				test="fn:exists($var_metadataRoot/metainfo/metac) or fn:exists($var_metadataRoot/metainfo/metuc)">
				<gmd:metadataConstraints>
					<gmd:MD_LegalConstraints>
						<xsl:if test="fn:exists($var_metadataRoot/metainfo/metac)">
							<gmd:accessConstraints>
								<gmd:MD_RestrictionCode>
									<xsl:attribute name="codeList">
										<xsl:value-of
											select="xs:string('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_RestrictionCode')"
										/>
									</xsl:attribute>
									<xsl:attribute name="codeListValue">
										<xsl:value-of select="xs:string('otherRestrictions')"/>
									</xsl:attribute>
									<xsl:attribute name="codeSpace">
										<xsl:value-of select="xs:string('008')"/>
									</xsl:attribute>
								</gmd:MD_RestrictionCode>
							</gmd:accessConstraints>
						</xsl:if>
						<xsl:if test="fn:exists($var_metadataRoot/metainfo/metuc)">
							<gmd:useConstraints>
								<gmd:MD_RestrictionCode>
									<xsl:attribute name="codeList">
										<xsl:value-of
											select="xs:string(xs:anyURI('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_RestrictionCode'))"
										/>
									</xsl:attribute>
									<xsl:attribute name="codeListValue">
										<xsl:value-of
											select="xs:string(xs:anyURI('otherRestrictions'))"/>
									</xsl:attribute>
									<xsl:attribute name="codeSpace">
										<xsl:value-of select="xs:string('008')"/>
									</xsl:attribute>
								</gmd:MD_RestrictionCode>
							</gmd:useConstraints>
						</xsl:if>
						<xsl:for-each select="$var_metadataRoot/metainfo/metuc">
							<gmd:otherConstraints>
								<gco:CharacterString>
									<xsl:value-of select="'Metadata Use Constraint: '"/>
									<xsl:value-of select="xs:string(.)"/>
								</gco:CharacterString>
							</gmd:otherConstraints>
						</xsl:for-each>
						<xsl:for-each select="$var_metadataRoot/metainfo/metac">
							<gmd:otherConstraints>
								<gco:CharacterString>
									<xsl:value-of select="'Metadata Access Constraint: '"/>
									<xsl:value-of select="xs:string(.)"/>
								</gco:CharacterString>
							</gmd:otherConstraints>
						</xsl:for-each>
					</gmd:MD_LegalConstraints>
				</gmd:metadataConstraints>
			</xsl:if>
			<!-- security constraints -->
			<xsl:for-each select="$var_metadataRoot/metainfo/metsi">
				<xsl:variable name="var_lookupSecurityClassType">
					<xsl:call-template name="vmf:securityClassType">
						<xsl:with-param name="input"
							select="fn:upper-case(fn:normalize-space(xs:string(metsc)))"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="var_securityClassCode">
					<xsl:call-template name="vmf:securityClassCode">
						<xsl:with-param name="input"
							select="fn:upper-case(fn:normalize-space(xs:string(metsc)))"/>
					</xsl:call-template>
				</xsl:variable>
				<gmd:metadataConstraints>
					<gmd:MD_SecurityConstraints>
						<xsl:choose>
							<xsl:when
								test="fn:exists($var_lookupSecurityClassType) and string-length(xs:string($var_lookupSecurityClassType))>0">
								<gmd:classification>
									<gmd:MD_ClassificationCode>
										<xsl:attribute name="codeListValue">
											<xsl:value-of
												select="xs:string($var_lookupSecurityClassType)"/>
										</xsl:attribute>
										<xsl:choose>
											<xsl:when test="$var_lookupSecurityClassType='unknown'">
												<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string('http://www.opengis.net/def/nil/OGC/0/unknown/')"
												/>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:attribute name="codeList">
												<xsl:value-of
												select="xs:string(xs:anyURI('http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#MD_ClassificationCode'))"
												/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
										<xsl:if test="$var_securityClassCode != 'unknown'">
											<xsl:attribute name="codeSpace">
												<xsl:value-of
												select="xs:string($var_securityClassCode)"/>
											</xsl:attribute>
										</xsl:if>
										<xsl:value-of select="metsc"/>
									</gmd:MD_ClassificationCode>
								</gmd:classification>
							</xsl:when>
							<xsl:otherwise>
								<gmd:classification gco:nilReason="missing"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="fn:exists(metscs) and string-length(xs:string(metscs))>0">
							<gmd:classificationSystem>
								<gco:CharacterString>
									<xsl:value-of select="xs:string(metscs)"/>
								</gco:CharacterString>
							</gmd:classificationSystem>
						</xsl:if>
						<xsl:if test="fn:exists(metshd) and string-length(xs:string(metshd))>0">
							<gmd:handlingDescription>
								<gco:CharacterString>
									<xsl:value-of select="xs:string(metshd)"/>
								</gco:CharacterString>
							</gmd:handlingDescription>
						</xsl:if>
					</gmd:MD_SecurityConstraints>
				</gmd:metadataConstraints>
			</xsl:for-each>
			<!-- metadata maintenance -->
			<gmd:metadataMaintenance>
				<gmd:MD_MaintenanceInformation>
					<gmd:maintenanceAndUpdateFrequency>
						<xsl:attribute name="gco:nilReason">
							<xsl:value-of select="xs:string('unknown')"/>
						</xsl:attribute>
					</gmd:maintenanceAndUpdateFrequency>
					<xsl:for-each select="$var_metadataRoot/metainfo/metrd">
						<!-- CSDGM has metrd: 'Metadata Review Date free date; Metadata Review Date later than Metadata Date' and 
							metfrd: 'Metadata Future Review Date free date; Metadata Future Review Date later than Metadata Review Date'
							interpretation here is that metrd is next update data. Put metfrd in maintenance note.
							Unfortunately these are 'free dates'  not even timeinfo elements, so interpreting what we get is wide open!-->
						<xsl:variable name="var_MDreviewDate"
							select="fn:lower-case(fn:normalize-space(xs:string(.)))"/>
						<gmd:dateOfNextUpdate>
							<xsl:variable name="var_procMDreviewDate">

								<xsl:call-template name="usgin:TimePositionFormat">
									<xsl:with-param name="inputDate" select="(metainfo/metrd)"/>
									<xsl:with-param name="inputTime"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:choose>
								<xsl:when
									test="fn:starts-with(xs:string($var_procMDreviewDate),'nil')">
									<xsl:attribute name="gco:nilReason">
										<xsl:value-of
											select="fn:substring-after(xs:string($var_procMDreviewDate),'nil')"
										/>
									</xsl:attribute>
								</xsl:when>
								<xsl:otherwise>
									<gco:Date>
										<xsl:value-of select="xs:string($var_procMDreviewDate)"/>
									</gco:Date>
								</xsl:otherwise>
							</xsl:choose>
						</gmd:dateOfNextUpdate>
					</xsl:for-each>
					<gmd:maintenanceNote>
						<xsl:for-each select="$var_metadataRoot">
							<!-- metadata review date; if present will be concatenated with the maintenance note -->
								<xsl:variable name="var_metFRevDateRept">
								<xsl:choose>
									<xsl:when test="fn:exists(metainfo/metfrd)">
										<xsl:variable name="var_DateTemp">
											<xsl:call-template name="usgin:TimePositionFormat">
												<xsl:with-param name="inputDate"
												select="(metainfo/metfrd)"/>
												<xsl:with-param name="inputTime"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:value-of
											select="concat(string(' Future metadata content review date: '), fn:string($var_DateTemp))"
										/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="''"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<gco:CharacterString>
								<xsl:value-of
									select="fn:normalize-space(fn:concat('This metadata was automatically generated from a metadata record encoded using the ', xs:string(metainfo/metstdn), ' standard, version ', xs:string(metainfo/metstdv), '. Conversion was executed by the 2014-11-30 version of csdgm-to-iso19115.xslt transform (SMR steve.richard at azgs dot az dot gov) to generate USGIN compatible ISO19139 XML, using xslt 1.0 for use by GeoPortal. ', $var_metFRevDateRept))"
								/>
							</gco:CharacterString>
						</xsl:for-each>
					</gmd:maintenanceNote>
					<gmd:contact>
						<gmd:CI_ResponsibleParty>
							<gmd:positionName>
								<gco:CharacterString>USGIN/NGDS metadata
									editor</gco:CharacterString>
							</gmd:positionName>
							<gmd:contactInfo>
								<gmd:CI_Contact>
									<gmd:address>
										<gmd:CI_Address>
											<gmd:electronicMailAddress>
												<gco:CharacterString>metadata@usgin.org</gco:CharacterString>
											</gmd:electronicMailAddress>
										</gmd:CI_Address>
									</gmd:address>
								</gmd:CI_Contact>
							</gmd:contactInfo>
							<gmd:role>
								<gmd:CI_RoleCode
									codeList="http://www.isotc211.org/2005/resources/Codelist/gmxCodelists.xml#CI_RoleCode"
									codeListValue="processor" codeSpace="007"
									>processor</gmd:CI_RoleCode>
							</gmd:role>
						</gmd:CI_ResponsibleParty>
					</gmd:contact>
				</gmd:MD_MaintenanceInformation>
			</gmd:metadataMaintenance>
		</gmd:MD_Metadata>
	</xsl:template>
	<!-- Map projection display handlers, this stuff gets put in the abstract -->
	<!-- Map Projections -->
	<xsl:template match="albers | equicon | lambertc">
		<xsl:apply-templates select="stdparll"/>
		<xsl:apply-templates select="longcm"/>
		<xsl:apply-templates select="latprjo"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="gnomonic | lamberta | orthogr | stereo | gvnsp">
		<xsl:for-each select="../gvnsp">
			<xsl:apply-templates select="heightpt"/>
		</xsl:for-each>
		<xsl:apply-templates select="longpc"/>
		<xsl:apply-templates select="latprjc"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="azimequi | polycon | transmer">
		<xsl:for-each select="../transmer">
			<xsl:apply-templates select="sfctrmer"/>
		</xsl:for-each>
		<xsl:apply-templates select="longcm"/>
		<xsl:apply-templates select="latprjo"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="miller | sinusoid | vdgrin">
		<xsl:for-each select="../equirect">
			<xsl:apply-templates select="stdparll"/>
		</xsl:for-each>
		<xsl:for-each select="../mercator">
			<xsl:apply-templates select="stdparll"/>
			<xsl:apply-templates select="sfequat"/>
		</xsl:for-each>
		<xsl:apply-templates select="longcm"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="equirect">
		<xsl:apply-templates select="stdparll"/>
		<xsl:apply-templates select="longcm"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="mercator">
		<xsl:apply-templates select="stdparll"/>
		<xsl:apply-templates select="sfequat"/>
		<xsl:apply-templates select="longcm"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="polarst">
		<xsl:apply-templates select="svlong"/>
		<xsl:apply-templates select="stdparll"/>
		<xsl:apply-templates select="sfprjorg"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="obqmerc">
		<xsl:apply-templates select="sfctrlin"/>
		<xsl:apply-templates select="obqlazim"/>
		<xsl:apply-templates select="obqlpt"/>
		<xsl:apply-templates select="latprjo"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="spaceobq">
		<xsl:apply-templates select="landsat"/>
		<xsl:apply-templates select="pathnum"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="robinson">
		<xsl:apply-templates select="longpc"/>
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<xsl:template match="modsak">
		<xsl:apply-templates select="feast"/>
		<xsl:apply-templates select="fnorth"/>
	</xsl:template>
	<!-- Map Projection Parameters -->
	<xsl:template match="stdparll"> Standard_Parallel: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="longcm"> Longitude_of_Central_Meridian: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="latprjo"> Latitude_of_Projection_Origin: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="feast"> False_Easting: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="fnorth"> False_Northing: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="sfequat"> Scale_Factor_at_Equator: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="heightpt"> Height_of_Perspective_Point_Above_Surface: <xsl:value-of
			select="."/>
	</xsl:template>
	<xsl:template match="longpc"> Longitude_of_Projection_Center: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="latprjc"> Latitude_of_Projection_Center: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="sfctrlin"> Scale_Factor_at_Center_Line: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="obqlazim"> Oblique_Line_Azimuth: <xsl:value-of select="."/>
		<xsl:for-each select="azimangl"> Azimuthal_Angle: <xsl:value-of select="."/>
		</xsl:for-each>
		<xsl:for-each select="azimptl"> Azimuthal_Measure_Point_Longitude: <xsl:value-of select="."
			/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="obqlpt"> Oblique_Line_Point: <xsl:value-of select="."/>
		<xsl:for-each select="obqllat"> Oblique_Line_Latitude: <xsl:value-of select="."/>
		</xsl:for-each>
		<xsl:for-each select="obqllong"> Oblique_Line_Longitude: <xsl:value-of select="."/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="svlong"> Straight_Vertical_Longitude_from_Pole: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="sfprjorg"> Scale_Factor_at_Projection_Origin: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="landsat"> Landsat_Number: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="pathnum"> Path_Number: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="sfctrmer"> Scale_Factor_at_Central_Meridian: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="otherprj"> Other_Projection's_Definition: <xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="attr">
		<!-- template to handle attributes of attributes, don't allow recursion --> Attribute Label:
			<xsl:value-of select="attrlabl"/> Definition: <xsl:value-of select="attrdef"/> Source:
			<xsl:value-of select="attrdefs"/> Attribute of Attribute Domain: <xsl:for-each
			select="attrdomv"> Attribute_Domain_Values: <xsl:for-each select="edom">
				Enumerated_Domain: <xsl:for-each select="edomv"> Value: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="edomvd"> Value_Definition: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="edomvds"> Value_Definition_Source: <xsl:value-of select="."/>
				</xsl:for-each>
			</xsl:for-each>
			<!-- end enumerated domain -->
			<xsl:for-each select="rdom"> Range_Domain: <xsl:for-each select="rdommin">
					Range_Minimum: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="rdommax"> Range_Maximum: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="attrunit"> Units_of_Measure: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="attrmres"> Attribute_Measurement_Resolution: <xsl:value-of
						select="."/>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="codesetd"> Codeset Domain: <xsl:for-each select="codesetn">
					Codeset Name: <xsl:value-of select="."/>
				</xsl:for-each>
				<xsl:for-each select="codesets"> Codeset Source: <xsl:value-of select="."/>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="udom"> Unrepresentable Domain: <xsl:value-of select="."/>
			</xsl:for-each>
		</xsl:for-each>
	</xsl:template>
</xsl:stylesheet>
